
NTI_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  000042a8  0000433c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001ae  008001ae  0000448a  2**0
                  ALLOC
  3 .stab         00004cec  00000000  00000000  0000448c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f51  00000000  00000000  00009178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b269  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ebec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fdc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ff84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001027a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_1>
       8:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_2>
       c:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_6>
      1c:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_12>
      34:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_13>
      38:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_14>
      3c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_15>
      40:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <main>
      8a:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 21 	jmp	0x426e	; 0x426e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 21 	jmp	0x424e	; 0x424e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 21 	jmp	0x424e	; 0x424e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 21 	jmp	0x426e	; 0x426e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 21 	jmp	0x427e	; 0x427e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 21 	jmp	0x424e	; 0x424e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 21 	jmp	0x424e	; 0x424e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 21 	jmp	0x424e	; 0x424e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 21 	jmp	0x428e	; 0x428e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 3f 21 	jmp	0x427e	; 0x427e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 57       	subi	r30, 0x7C	; 124
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_voidInit>:
void (*Private_voidRXFunc)(void) = NULL;
void (*Private_voidUDRFunc)(void) = NULL;
void (*Private_voidTXFunc)(void) = NULL;

void USART_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRC, UCSRC_URSEL);
     e36:	a0 e4       	ldi	r26, 0x40	; 64
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e0 e4       	ldi	r30, 0x40	; 64
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24

	// ASYNCHRONOUS MODE
#if 	MODE_OF_OPERATION == ASYNCHRONOUS
	Clear_Bit(UCSRC, UCSRC_UMSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7b       	andi	r24, 0xBF	; 191
     e50:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UCPOL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	8c 93       	st	X, r24
	// Select Speed in Asynchronous MOde
#if 	SPEED_OPERATION == NORMAL_SPEED_MODE
	Clear_Bit(UCSRA, UCSRA_U2X);
#define UBRRL_VAL 	( (F_OC / (16 * BAUD_RATE) ) - 1)
#elif 	SPEED_OPERATION == DOUBLE_SPEED_MODE
	Set_Bit(UCSRA, UCSRA_U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	8c 93       	st	X, r24
#else
#endif

	// Selecting Frame
#if 	FRAME_SIZE == 8
	Set_Bit(UCSRC, UCSRC_UCSZ0);
     e6e:	a0 e4       	ldi	r26, 0x40	; 64
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e0 e4       	ldi	r30, 0x40	; 64
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	Set_Bit(UCSRC, UCSRC_UCSZ1);
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
	Clear_Bit(UCSRB, UCSRB_UCSZ2);
     e8a:	aa e2       	ldi	r26, 0x2A	; 42
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e2       	ldi	r30, 0x2A	; 42
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	8c 93       	st	X, r24
#endif


	// Selecting Parity Mode
#if 	PARITY_MODE == DISABLED_PARTITY
	Clear_Bit(UCSRC, UCSRC_UPM0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UPM1);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7d       	andi	r24, 0xDF	; 223
     eb2:	8c 93       	st	X, r24
	// Select Stop Bit
#if 	STOP_BIT_SELECT == ONE_BIT
	Clear_Bit(UCSRC, UCSRC_USBS);

#elif 	STOP_BIT_SELECT == TWO_BIT
	Set_Bit(UCSRC, UCSRC_USBS);
     eb4:	a0 e4       	ldi	r26, 0x40	; 64
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e0 e4       	ldi	r30, 0x40	; 64
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	8c 93       	st	X, r24
#else
#endif



	Clear_Bit(UCSRC, UCSRC_URSEL);
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	8c 93       	st	X, r24
	// Calculating UBRRL value
	UCSRC = 0;
     ed0:	e0 e4       	ldi	r30, 0x40	; 64
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	10 82       	st	Z, r1
	UBRRL = UBRRL_VAL;
     ed6:	e9 e2       	ldi	r30, 0x29	; 41
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8f ec       	ldi	r24, 0xCF	; 207
     edc:	80 83       	st	Z, r24


	// Enabling TX and RX
	Set_Bit(UCSRB, UCSRB_TXEN);
     ede:	aa e2       	ldi	r26, 0x2A	; 42
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e2       	ldi	r30, 0x2A	; 42
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	8c 93       	st	X, r24
	Set_Bit(UCSRB, UCSRB_RXEN);
     eec:	aa e2       	ldi	r26, 0x2A	; 42
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ea e2       	ldi	r30, 0x2A	; 42
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 61       	ori	r24, 0x10	; 16
     ef8:	8c 93       	st	X, r24

}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <USART_voidSend>:

void USART_voidSend(u8 Copy_u8Data)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
     f0c:	eb e2       	ldi	r30, 0x2B	; 43
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 95       	swap	r24
     f14:	86 95       	lsr	r24
     f16:	87 70       	andi	r24, 0x07	; 7
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	90 70       	andi	r25, 0x00	; 0
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	a1 f3       	breq	.-24     	; 0xf0c <USART_voidSend+0xc>

	UDR = Copy_u8Data;
     f24:	ec e2       	ldi	r30, 0x2C	; 44
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	80 83       	st	Z, r24
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <USART_voidSendInterrupt>:

void USART_voidSendInterrupt(u8 Copy_u8Data)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
     f40:	ec e2       	ldi	r30, 0x2C	; 44
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	80 83       	st	Z, r24
}
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	dc f7       	brge	.-10     	; 0xf58 <USART_u8Receive+0x8>

	return UDR;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <USART_u8TransReceive>:

u8 USART_u8TransReceive( u8 Copy_u8Data )
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDRE is zero to send
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
     f7a:	eb e2       	ldi	r30, 0x2B	; 43
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 95       	swap	r24
     f82:	86 95       	lsr	r24
     f84:	87 70       	andi	r24, 0x07	; 7
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	81 70       	andi	r24, 0x01	; 1
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	a1 f3       	breq	.-24     	; 0xf7a <USART_u8TransReceive+0xc>
	UDR = Copy_u8Data;
     f92:	ec e2       	ldi	r30, 0x2C	; 44
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	80 83       	st	Z, r24

	// Wait Until Receive flag is zero
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
     f9a:	eb e2       	ldi	r30, 0x2B	; 43
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <USART_u8TransReceive+0x2c>

	return UDR;
     fa4:	ec e2       	ldi	r30, 0x2C	; 44
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z

}
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <USART_u8ReceiveInterrupt>:

u8 USART_u8ReceiveInterrupt(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <USART_voidSendText>:

void USART_voidSendText(char *Copy_u8Data)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <USART_voidSendText+0x6>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	0e c0       	rjmp	.+28     	; 0xff6 <USART_voidSendText+0x30>

	while( *(Copy_u8Data + i) != '\0')
	{
		USART_voidSend( *(Copy_u8Data + i) );
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	fc 01       	movw	r30, r24
     fe6:	e2 0f       	add	r30, r18
     fe8:	f3 1f       	adc	r31, r19
     fea:	80 81       	ld	r24, Z
     fec:	0e 94 80 07 	call	0xf00	; 0xf00 <USART_voidSend>
		i++;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	89 83       	std	Y+1, r24	; 0x01

void USART_voidSendText(char *Copy_u8Data)
{
	u8 i = 0;

	while( *(Copy_u8Data + i) != '\0')
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	fc 01       	movw	r30, r24
    1002:	e2 0f       	add	r30, r18
    1004:	f3 1f       	adc	r31, r19
    1006:	80 81       	ld	r24, Z
    1008:	88 23       	and	r24, r24
    100a:	39 f7       	brne	.-50     	; 0xfda <USART_voidSendText+0x14>
	{
		USART_voidSend( *(Copy_u8Data + i) );
		i++;
	}

}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <USART_voidReceiveText>:

void USART_voidReceiveText(char *Copy_u8Data)
{
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <USART_voidReceiveText+0xa>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	0f c0       	rjmp	.+30     	; 0x104e <USART_voidReceiveText+0x36>
	while( *(Copy_u8Data + i) != '\0' )
	{
		*(Copy_u8Data + i) = USART_u8Receive();
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	8c 01       	movw	r16, r24
    103c:	02 0f       	add	r16, r18
    103e:	13 1f       	adc	r17, r19
    1040:	0e 94 a8 07 	call	0xf50	; 0xf50 <USART_u8Receive>
    1044:	f8 01       	movw	r30, r16
    1046:	80 83       	st	Z, r24
		i++;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveText(char *Copy_u8Data)
{
	u8 i = 0;
	while( *(Copy_u8Data + i) != '\0' )
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	80 81       	ld	r24, Z
    1060:	88 23       	and	r24, r24
    1062:	31 f7       	brne	.-52     	; 0x1030 <USART_voidReceiveText+0x18>
	{
		*(Copy_u8Data + i) = USART_u8Receive();
		i++;
	}
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <USART_voidRXCallBackFunc>:

void USART_voidRXCallBackFunc(void (*PTR)(void))
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <USART_voidRXCallBackFunc+0x6>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f0       	breq	.+12     	; 0x1096 <USART_voidRXCallBackFunc+0x22>
	{
		Private_voidRXFunc = PTR;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	90 93 af 01 	sts	0x01AF, r25
    1092:	80 93 ae 01 	sts	0x01AE, r24
	}
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <USART_voidTXCallBackFunc>:

void USART_voidTXCallBackFunc(void (*PTR)(void))
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <USART_voidTXCallBackFunc+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <USART_voidTXCallBackFunc+0x22>
	{
		Private_voidTXFunc = PTR;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	90 93 b3 01 	sts	0x01B3, r25
    10be:	80 93 b2 01 	sts	0x01B2, r24
	}
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <USART_voidUDRCallBackFunc>:


void USART_voidUDRCallBackFunc(void (*PTR)(void) )
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <USART_voidUDRCallBackFunc+0x6>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	31 f0       	breq	.+12     	; 0x10ee <USART_voidUDRCallBackFunc+0x22>
	{
		Private_voidUDRFunc = PTR;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	90 93 b1 01 	sts	0x01B1, r25
    10ea:	80 93 b0 01 	sts	0x01B0, r24
	}
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <USART_voidRXEnableInterrupt>:

void USART_voidRXEnableInterrupt()
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_RXCIE);
    1100:	aa e2       	ldi	r26, 0x2A	; 42
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ea e2       	ldi	r30, 0x2A	; 42
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	8c 93       	st	X, r24
}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <USART_voidRXDisableInterrupt>:

void USART_voidRXDisableInterrupt()
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_RXCIE);
    111c:	aa e2       	ldi	r26, 0x2A	; 42
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ea e2       	ldi	r30, 0x2A	; 42
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 77       	andi	r24, 0x7F	; 127
    1128:	8c 93       	st	X, r24
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <USART_voidTXEnableInterrupt>:

void USART_voidTXEnableInterrupt()
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_TXCIE);
    1138:	aa e2       	ldi	r26, 0x2A	; 42
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ea e2       	ldi	r30, 0x2A	; 42
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	8c 93       	st	X, r24
}
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <USART_voidTXDisableInterrupt>:

void USART_voidTXDisableInterrupt()
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_TXCIE);
    1154:	aa e2       	ldi	r26, 0x2A	; 42
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ea e2       	ldi	r30, 0x2A	; 42
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8f 7b       	andi	r24, 0xBF	; 191
    1160:	8c 93       	st	X, r24
}
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <USART_voidUDREnableInterrupt>:


void USART_voidUDREnableInterrupt()
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_UDRIE);
    1170:	aa e2       	ldi	r26, 0x2A	; 42
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e2       	ldi	r30, 0x2A	; 42
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 62       	ori	r24, 0x20	; 32
    117c:	8c 93       	st	X, r24
}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <USART_voidUDRDisableInterrupt>:

void USART_voidUDRDisableInterrupt()
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_UDRIE);
    118c:	aa e2       	ldi	r26, 0x2A	; 42
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ea e2       	ldi	r30, 0x2A	; 42
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7d       	andi	r24, 0xDF	; 223
    1198:	8c 93       	st	X, r24
}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <__vector_13>:


void __vector_13(void)__attribute__((signal));
void __vector_13(void)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidRXFunc != NULL )
    11ca:	80 91 ae 01 	lds	r24, 0x01AE
    11ce:	90 91 af 01 	lds	r25, 0x01AF
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <__vector_13+0x40>
	{
		Private_voidRXFunc();
    11d6:	e0 91 ae 01 	lds	r30, 0x01AE
    11da:	f0 91 af 01 	lds	r31, 0x01AF
    11de:	09 95       	icall
	}
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_14>:

void __vector_14(void)__attribute__((signal,used, externally_visible));
void __vector_14(void)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidUDRFunc != NULL )
    1230:	80 91 b0 01 	lds	r24, 0x01B0
    1234:	90 91 b1 01 	lds	r25, 0x01B1
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	29 f0       	breq	.+10     	; 0x1246 <__vector_14+0x40>
	{
		Private_voidUDRFunc();
    123c:	e0 91 b0 01 	lds	r30, 0x01B0
    1240:	f0 91 b1 01 	lds	r31, 0x01B1
    1244:	09 95       	icall
	}
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	0f 90       	pop	r0
    1268:	1f 90       	pop	r1
    126a:	18 95       	reti

0000126c <__vector_15>:

void __vector_15(void) __attribute__((signal,used, externally_visible));
void __vector_15(void)
{
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidTXFunc != NULL )
    1296:	80 91 b2 01 	lds	r24, 0x01B2
    129a:	90 91 b3 01 	lds	r25, 0x01B3
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	29 f0       	breq	.+10     	; 0x12ac <__vector_15+0x40>
	{
		Private_voidTXFunc();
    12a2:	e0 91 b2 01 	lds	r30, 0x01B2
    12a6:	f0 91 b3 01 	lds	r31, 0x01B3
    12aa:	09 95       	icall
	}
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <TMR1_voidInit>:
#include "TMR1_Interface.h"

static void (*Global_pvTimerICUCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR1_voidInit(){
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    12da:	ef e4       	ldi	r30, 0x4F	; 79
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
	TCCR1B = 0;
    12e0:	ee e4       	ldi	r30, 0x4E	; 78
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	10 82       	st	Z, r1
	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE);

#elif     TIMER1_Mode == TIMER1_CTC
	/*Choose CTC Mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    12e6:	af e4       	ldi	r26, 0x4F	; 79
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8e 7f       	andi	r24, 0xFE	; 254
    12f2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    12f4:	af e4       	ldi	r26, 0x4F	; 79
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e4       	ldi	r30, 0x4F	; 79
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8d 7f       	andi	r24, 0xFD	; 253
    1300:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    1302:	ae e4       	ldi	r26, 0x4E	; 78
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7e       	andi	r24, 0xEF	; 239
    131c:	8c 93       	st	X, r24

	/*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	SET_BIT(TIMSK, TIMSK_OCIE1A);
    131e:	a9 e5       	ldi	r26, 0x59	; 89
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e9 e5       	ldi	r30, 0x59	; 89
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 61       	ori	r24, 0x10	; 16
    132a:	8c 93       	st	X, r24

	/*Set compare match value to 25000*/
	OCR1A = 24999;
    132c:	ea e4       	ldi	r30, 0x4A	; 74
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	87 ea       	ldi	r24, 0xA7	; 167
    1332:	91 e6       	ldi	r25, 0x61	; 97
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
	/*Set PRESCALAR 64*/
	SET_BIT(TCCR1B, TCCR1B_CS10);
    1338:	ae e4       	ldi	r26, 0x4E	; 78
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ee e4       	ldi	r30, 0x4E	; 78
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS11);
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS12);
    1354:	ae e4       	ldi	r26, 0x4E	; 78
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ee e4       	ldi	r30, 0x4E	; 78
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8b 7f       	andi	r24, 0xFB	; 251
    1360:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_TICIE1);
#endif
//	SET_BIT(TCCR1B,TCCR1B_CS10);
//	CLR_BIT(TCCR1B,TCCR1B_CS11);
//	SET_BIT(TCCR1B,TCCR1B_CS12);
}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 value){
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <TMR1_voidSetICR+0x6>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1376:	e6 e4       	ldi	r30, 0x46	; 70
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <TMR1_voidSetTimerValue>:

void TMR1_voidSetTimerValue(u16 value){
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <TMR1_voidSetTimerValue+0x6>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    139a:	ec e4       	ldi	r30, 0x4C	; 76
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <TMR1_u16ReadTimerValue>:
u16 TMR1_u16ReadTimerValue(){
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    13b8:	ec e4       	ldi	r30, 0x4C	; 76
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u16 duty){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <TMR1_voidSetDutyCycle+0x6>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    13d4:	ea e4       	ldi	r30, 0x4A	; 74
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <TMR1_ICUsetEdgeDetectionMode>:

void TMR1_ICUsetEdgeDetectionMode(u8 edge)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	41 f4       	brne	.+16     	; 0x140c <TMR1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 64       	ori	r24, 0x40	; 64
    1408:	8c 93       	st	X, r24
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <TMR1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 23       	and	r24, r24
    1410:	39 f4       	brne	.+14     	; 0x1420 <TMR1_ICUsetEdgeDetectionMode+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES);
    1412:	ae e4       	ldi	r26, 0x4E	; 78
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ee e4       	ldi	r30, 0x4E	; 78
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 7b       	andi	r24, 0xBF	; 191
    141e:	8c 93       	st	X, r24
	}
}
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <TMR1_ICUgetInputCaptureValue>:

u16 TMR1_ICUgetInputCaptureValue()
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1430:	e6 e4       	ldi	r30, 0x46	; 70
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <TMR1_ICUclearTimerValue>:

void TMR1_ICUclearTimerValue()
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1446:	ec e4       	ldi	r30, 0x4C	; 76
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	11 82       	std	Z+1, r1	; 0x01
    144c:	10 82       	st	Z, r1
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <TMR1_ICUDeInit>:

void TMR1_ICUDeInit()
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    145c:	ef e4       	ldi	r30, 0x4F	; 79
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	10 82       	st	Z, r1
	TCCR1B = 0;
    1462:	ee e4       	ldi	r30, 0x4E	; 78
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
	TCNT1  = 0;
    1468:	ec e4       	ldi	r30, 0x4C	; 76
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	11 82       	std	Z+1, r1	; 0x01
    146e:	10 82       	st	Z, r1
	ICR1   = 0;
    1470:	e6 e4       	ldi	r30, 0x46	; 70
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	11 82       	std	Z+1, r1	; 0x01
    1476:	10 82       	st	Z, r1

	/* Disable the interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1478:	a9 e5       	ldi	r26, 0x59	; 89
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e9 e5       	ldi	r30, 0x59	; 89
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	8f 7d       	andi	r24, 0xDF	; 223
    1484:	8c 93       	st	X, r24
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TMR1_voidTimer1ICUSetCallBack>:

void TMR1_voidTimer1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <TMR1_voidTimer1ICUSetCallBack+0x6>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	90 93 b5 01 	sts	0x01B5, r25
    14a2:	80 93 b4 01 	sts	0x01B4, r24
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <TMR1_voidTimer1CTCSetCallBack>:

void TMR1_voidTimer1CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <TMR1_voidTimer1CTCSetCallBack+0x6>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	90 93 b7 01 	sts	0x01B7, r25
    14c6:	80 93 b6 01 	sts	0x01B6, r24
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    14fe:	80 91 b4 01 	lds	r24, 0x01B4
    1502:	90 91 b5 01 	lds	r25, 0x01B5
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	29 f0       	breq	.+10     	; 0x1514 <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    150a:	e0 91 b4 01 	lds	r30, 0x01B4
    150e:	f0 91 b5 01 	lds	r31, 0x01B5
    1512:	09 95       	icall
	}
}
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL){
    1564:	80 91 b6 01 	lds	r24, 0x01B6
    1568:	90 91 b7 01 	lds	r25, 0x01B7
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	29 f0       	breq	.+10     	; 0x157a <__vector_7+0x40>
		Global_pvTimerCTCCallBack();
    1570:	e0 91 b6 01 	lds	r30, 0x01B6
    1574:	f0 91 b7 01 	lds	r31, 0x01B7
    1578:	09 95       	icall
	}
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <SPI_voidMasterInit>:
#include "SPI_Interface.h"

void (*Private_voidSPIFunc)(void) = NULL;

void SPI_voidMasterInit(void)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Master */
	Set_Bit(SPCR, SPCR_MSTR);
    15a8:	ad e2       	ldi	r26, 0x2D	; 45
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ed e2       	ldi	r30, 0x2D	; 45
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 61       	ori	r24, 0x10	; 16
    15b4:	8c 93       	st	X, r24

#if 	INTERRUPT_MODE == ENABLE_INTERRUPT
	Set_Bit(SPCR, SPCR_SPIE);
    15b6:	ad e2       	ldi	r26, 0x2D	; 45
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ed e2       	ldi	r30, 0x2D	; 45
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 68       	ori	r24, 0x80	; 128
    15c2:	8c 93       	st	X, r24
#else
#endif


#if 	DATA_ORDER == LSB_FIRST
	Set_Bit(SPCR, SPCR_DORD);
    15c4:	ad e2       	ldi	r26, 0x2D	; 45
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ed e2       	ldi	r30, 0x2D	; 45
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 62       	ori	r24, 0x20	; 32
    15d0:	8c 93       	st	X, r24
#else
#endif


#if 	CLOCK_POLARITY == IDLE_LOW
	Clear_Bit(SPCR, SPCR_CPOL);
    15d2:	ad e2       	ldi	r26, 0x2D	; 45
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ed e2       	ldi	r30, 0x2D	; 45
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	8c 93       	st	X, r24
#else
#endif


#if 	CLOCK_PHASE == ZERO
	Clear_Bit(SPCR, SPCR_CPHA);
    15e0:	ad e2       	ldi	r26, 0x2D	; 45
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ed e2       	ldi	r30, 0x2D	; 45
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8b 7f       	andi	r24, 0xFB	; 251
    15ec:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPCR_CPOL);
#else
#endif

#if 	SPI_FREQUENCY == QUARTER_FREQ
	Clear_Bit(SPCR, SPCR_SPR0);
    15ee:	ad e2       	ldi	r26, 0x2D	; 45
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ed e2       	ldi	r30, 0x2D	; 45
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8e 7f       	andi	r24, 0xFE	; 254
    15fa:	8c 93       	st	X, r24
	Clear_Bit(SPCR, SPCR_SPR1);
    15fc:	ad e2       	ldi	r26, 0x2D	; 45
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ed e2       	ldi	r30, 0x2D	; 45
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8d 7f       	andi	r24, 0xFD	; 253
    1608:	8c 93       	st	X, r24
	Clear_Bit(SPSR, SPSR_SPI2X);
    160a:	ae e2       	ldi	r26, 0x2E	; 46
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ee e2       	ldi	r30, 0x2E	; 46
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8e 7f       	andi	r24, 0xFE	; 254
    1616:	8c 93       	st	X, r24
#else
#endif


	/* SPI Enable */
	Set_Bit(SPCR,SPCR_SPE);
    1618:	ad e2       	ldi	r26, 0x2D	; 45
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ed e2       	ldi	r30, 0x2D	; 45
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 64       	ori	r24, 0x40	; 64
    1624:	8c 93       	st	X, r24

}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Slave */
	Clear_Bit(SPCR, SPCR_MSTR);
    1634:	ad e2       	ldi	r26, 0x2D	; 45
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	ed e2       	ldi	r30, 0x2D	; 45
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8f 7e       	andi	r24, 0xEF	; 239
    1640:	8c 93       	st	X, r24


#if 	INTERRUPT_MODE == ENABLE_INTERRUPT
	Set_Bit(SPCR, SPCR_SPIE);
    1642:	ad e2       	ldi	r26, 0x2D	; 45
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ed e2       	ldi	r30, 0x2D	; 45
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	8c 93       	st	X, r24
#else
#endif


#if 	DATA_ORDER == LSB_FIRST
	Set_Bit(SPCR, SPCR_DORD);
    1650:	ad e2       	ldi	r26, 0x2D	; 45
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ed e2       	ldi	r30, 0x2D	; 45
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	80 62       	ori	r24, 0x20	; 32
    165c:	8c 93       	st	X, r24
#else
#endif


	/* SPI Enable */
	Set_Bit(SPCR,SPCR_SPE);
    165e:	ad e2       	ldi	r26, 0x2D	; 45
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ed e2       	ldi	r30, 0x2D	; 45
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 64       	ori	r24, 0x40	; 64
    166a:	8c 93       	st	X, r24
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <SPI_u8TransReceive>:

u8 SPI_u8TransReceive( u8 Copy_u8Data )
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data */
	SPDR = Copy_u8Data;
    167e:	ef e2       	ldi	r30, 0x2F	; 47
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	80 83       	st	Z, r24

	/* Wait until transfer complete */
	while( Get_Bit(SPSR, SPSR_SPIF) == 0 );
    1686:	ee e2       	ldi	r30, 0x2E	; 46
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <SPI_u8TransReceive+0x14>

	return SPDR;
    1690:	ef e2       	ldi	r30, 0x2F	; 47
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
}
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <SPI_u8Receieve>:


u8 SPI_u8Receieve()
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    16a6:	ef e2       	ldi	r30, 0x2F	; 47
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <SPI_voidTransmit>:

void SPI_voidTransmit(u8 Copy_u8Data)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    16be:	ef e2       	ldi	r30, 0x2F	; 47
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 83       	st	Z, r24
}
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <SPI_voidCallBack>:


void SPI_voidCallBack( void (*Ptr)(void) )
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <SPI_voidCallBack+0x6>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr != NULL)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <SPI_voidCallBack+0x22>
	{
		Private_voidSPIFunc = Ptr;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	90 93 b9 01 	sts	0x01B9, r25
    16ec:	80 93 b8 01 	sts	0x01B8, r24
	}
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <__vector_12>:


void __vector_12(void)__attribute__((signal,used,externally_visible));
void __vector_12(void)
{
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidSPIFunc != NULL )
    1724:	80 91 b8 01 	lds	r24, 0x01B8
    1728:	90 91 b9 01 	lds	r25, 0x01B9
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	29 f0       	breq	.+10     	; 0x173a <__vector_12+0x40>
	{
		Private_voidSPIFunc();
    1730:	e0 91 b8 01 	lds	r30, 0x01B8
    1734:	f0 91 b9 01 	lds	r31, 0x01B9
    1738:	09 95       	icall
	}
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
    1768:	ea e3       	ldi	r30, 0x3A	; 58
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8f eb       	ldi	r24, 0xBF	; 191
    1776:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
    1778:	e4 e3       	ldi	r30, 0x34	; 52
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 ef       	ldi	r24, 0xF0	; 240
    177e:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a ef       	ldi	r24, 0xFA	; 250
    1786:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    1788:	eb e3       	ldi	r30, 0x3B	; 59
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 e1       	ldi	r24, 0x10	; 16
    1794:	80 83       	st	Z, r24
    PORTC = PORTC_INIT_VALUE;
    1796:	e5 e3       	ldi	r30, 0x35	; 53
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	80 83       	st	Z, r24
    PORTD = PORTD_INIT_VALUE;
    179e:	e2 e3       	ldi	r30, 0x32	; 50
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	80 83       	st	Z, r24


}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <I2C_Master_voidInit>:
//	// Clear The Interrupt Flag
//	Set_Bit(TWCR, TWCR_TWINT);
//}


void I2C_Master_voidInit(void){
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
#if I2C_PRESCALER == I2C_PRESCALER_1
  /*Set Prescaler Values*/
  CLR_BIT(TWSR, TWSR_TWPS0);
    17b4:	a1 e2       	ldi	r26, 0x21	; 33
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e1 e2       	ldi	r30, 0x21	; 33
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8e 7f       	andi	r24, 0xFE	; 254
    17c0:	8c 93       	st	X, r24
  CLR_BIT(TWSR, TWSR_TWPS1);
    17c2:	a1 e2       	ldi	r26, 0x21	; 33
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e1 e2       	ldi	r30, 0x21	; 33
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8d 7f       	andi	r24, 0xFD	; 253
    17ce:	8c 93       	st	X, r24
  SET_BIT(TWSR, TWSR_TWPS0);
  SET_BIT(TWSR, TWSR_TWPS1);
#endif

  /*Set TWBR with the Value =>100KHZ*/
  TWBR = I2C_TWBR_VALUE;
    17d0:	e0 e2       	ldi	r30, 0x20	; 32
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	88 e4       	ldi	r24, 0x48	; 72
    17d6:	80 83       	st	Z, r24

  /*Enable  I2C*/
  SET_BIT(TWCR,TWCR_TWEN);
    17d8:	a6 e5       	ldi	r26, 0x56	; 86
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e6 e5       	ldi	r30, 0x56	; 86
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	84 60       	ori	r24, 0x04	; 4
    17e4:	8c 93       	st	X, r24
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address){
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	89 83       	std	Y+1, r24	; 0x01
  /*Set Slave Address iN TWAR*/
  TWAR = I2C_Address;
    17f8:	e2 e2       	ldi	r30, 0x22	; 34
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  Set_Bit(TWCR,TWCR_TWEA);
    1800:	a6 e5       	ldi	r26, 0x56	; 86
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	8c 93       	st	X, r24
#elif I2C_ACK_MODE == ACK_DISABLE
  /*Disable  ACK*/
  Clear_Bit(TWCR,TWCR_TWEA);
#endif
  /*Enable I2C*/
  SET_BIT(TWCR, TWCR_TWEN);
    180e:	a6 e5       	ldi	r26, 0x56	; 86
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e6 e5       	ldi	r30, 0x56	; 86
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	84 60       	ori	r24, 0x04	; 4
    181a:	8c 93       	st	X, r24
}
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <I2C_Master_enuSendStartCond>:

I2C_Error_State I2C_Master_enuSendStartCond(void){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
  I2C_Error_State state = NoError;
    182e:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1830:	e6 e5       	ldi	r30, 0x56	; 86
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	84 ee       	ldi	r24, 0xE4	; 228
    1836:	80 83       	st	Z, r24
  /*Disable  ACK*/
  TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

  /*Wait for the flag*/
  while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1838:	e6 e5       	ldi	r30, 0x56	; 86
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 23       	and	r24, r24
    1840:	dc f7       	brge	.-10     	; 0x1838 <I2C_Master_enuSendStartCond+0x14>

  /*Check Status*/
  if((TWSR & 0xF8) != I2C_MTXCheckStart){
    1842:	e1 e2       	ldi	r30, 0x21	; 33
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 7f       	andi	r24, 0xF8	; 248
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	91 05       	cpc	r25, r1
    1854:	11 f0       	breq	.+4      	; 0x185a <I2C_Master_enuSendStartCond+0x36>
    state = ErrorStartCondition;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
  }
  return state;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
}
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State I2C_Master_enuSendRepeatedStartCond(void){
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
  I2C_Error_State state = NoError;
    186e:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1870:	e6 e5       	ldi	r30, 0x56	; 86
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	84 ee       	ldi	r24, 0xE4	; 228
    1876:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
  /*Disable  ACK*/
  TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
  /*Wait for the flag*/
  while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1878:	e6 e5       	ldi	r30, 0x56	; 86
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	dc f7       	brge	.-10     	; 0x1878 <I2C_Master_enuSendRepeatedStartCond+0x14>

  /*Check Status*/
  if((TWSR & 0xF8) != I2C_MTXCheckReStart){
    1882:	e1 e2       	ldi	r30, 0x21	; 33
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	88 7f       	andi	r24, 0xF8	; 248
    188e:	90 70       	andi	r25, 0x00	; 0
    1890:	80 31       	cpi	r24, 0x10	; 16
    1892:	91 05       	cpc	r25, r1
    1894:	11 f0       	breq	.+4      	; 0x189a <I2C_Master_enuSendRepeatedStartCond+0x36>
    state = ErrorRestartCondition;
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	89 83       	std	Y+1, r24	; 0x01
  }
  return state;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
}
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <I2C_Master_enuSendSlaveAddressWithRead>:


I2C_Error_State I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <I2C_Master_enuSendSlaveAddressWithRead+0x6>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	8a 83       	std	Y+2, r24	; 0x02
  I2C_Error_State state = NoError;
    18b0:	19 82       	std	Y+1, r1	; 0x01

  /*Load the slave address*/
  TWDR = I2C_Address;
    18b2:	e3 e2       	ldi	r30, 0x23	; 35
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 83       	st	Z, r24
  /*Select the read mode*/
  SET_BIT(TWDR, 0);
    18ba:	a3 e2       	ldi	r26, 0x23	; 35
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e3 e2       	ldi	r30, 0x23	; 35
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	81 60       	ori	r24, 0x01	; 1
    18c6:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    18c8:	e6 e5       	ldi	r30, 0x56	; 86
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	84 ec       	ldi	r24, 0xC4	; 196
    18ce:	80 83       	st	Z, r24
  /*Disable  ACK*/
  TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

  /*Wait for the flag*/
  while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    18d0:	e6 e5       	ldi	r30, 0x56	; 86
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 23       	and	r24, r24
    18d8:	dc f7       	brge	.-10     	; 0x18d0 <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

  /*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
  if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithAck){
    18da:	e1 e2       	ldi	r30, 0x21	; 33
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	88 7f       	andi	r24, 0xF8	; 248
    18e6:	90 70       	andi	r25, 0x00	; 0
    18e8:	80 34       	cpi	r24, 0x40	; 64
    18ea:	91 05       	cpc	r25, r1
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <I2C_Master_enuSendSlaveAddressWithRead+0x4e>
    state = ErrorSlaveAddressReadWithAck;
    18ee:	85 e0       	ldi	r24, 0x05	; 5
    18f0:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
  if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithOutAck){
    state = ErrorSlaveAddressReadWithoutAck;
  }
#endif
  return state;
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address){
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	8a 83       	std	Y+2, r24	; 0x02
  I2C_Error_State state = NoError;
    190a:	19 82       	std	Y+1, r1	; 0x01
  /*Load the slave address*/
  TWDR = I2C_Address;
    190c:	e3 e2       	ldi	r30, 0x23	; 35
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24

  /*Select the write mode*/
  CLR_BIT(TWDR, 0);
    1914:	a3 e2       	ldi	r26, 0x23	; 35
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e3 e2       	ldi	r30, 0x23	; 35
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8e 7f       	andi	r24, 0xFE	; 254
    1920:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	84 ec       	ldi	r24, 0xC4	; 196
    1928:	80 83       	st	Z, r24
  /*Disable  ACK*/
  TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

  /*Wait for the flag*/
  while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	dc f7       	brge	.-10     	; 0x192a <I2C_Master_enuSendSlaveAddressWithWrite+0x2c>

  /*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
  if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithAck){
    1934:	e1 e2       	ldi	r30, 0x21	; 33
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	88 7f       	andi	r24, 0xF8	; 248
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 31       	cpi	r24, 0x18	; 24
    1944:	91 05       	cpc	r25, r1
    1946:	11 f0       	breq	.+4      	; 0x194c <I2C_Master_enuSendSlaveAddressWithWrite+0x4e>
    state = ErrorSlaveAddressWriteWithAck;
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
  if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithOutAck){
    state = ErrorSlaveAddressWriteWithoutAck;
  }
#endif
  return state;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <I2C_Master_enuSendu8Data>:


I2C_Error_State I2C_Master_enuSendu8Data(u8 I2C_Data){
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <I2C_Master_enuSendu8Data+0x6>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	8a 83       	std	Y+2, r24	; 0x02
  I2C_Error_State state = NoError;
    1964:	19 82       	std	Y+1, r1	; 0x01

  /*Load the data*/
  TWDR = I2C_Data;
    1966:	e3 e2       	ldi	r30, 0x23	; 35
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
  /*Enable  ACK*/
  TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    196e:	e6 e5       	ldi	r30, 0x56	; 86
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	84 ec       	ldi	r24, 0xC4	; 196
    1974:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
  /*Disable  ACK*/
  TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
  /*Wait for the flag*/
    while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1976:	e6 e5       	ldi	r30, 0x56	; 86
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	88 23       	and	r24, r24
    197e:	dc f7       	brge	.-10     	; 0x1976 <I2C_Master_enuSendu8Data+0x1e>

    /*Check Status*/
  #if I2C_ACK_MODE == ACK_ENABLE
    if((TWSR & 0xF8) != I2C_MTXCheckData_WithAck){
    1980:	e1 e2       	ldi	r30, 0x21	; 33
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	88 7f       	andi	r24, 0xF8	; 248
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	88 32       	cpi	r24, 0x28	; 40
    1990:	91 05       	cpc	r25, r1
    1992:	11 f0       	breq	.+4      	; 0x1998 <I2C_Master_enuSendu8Data+0x40>
      state = ErrorWriteDataWithAck;
    1994:	87 e0       	ldi	r24, 0x07	; 7
    1996:	89 83       	std	Y+1, r24	; 0x01
  #elif  I2C_ACK_MODE == ACK_DISABLE
    if((TWSR & 0xF8) != I2C_MTXCheckData_WithOutAck){
      state = ErrorWriteDataWithoutAck;
    }
  #endif
    return state;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
  }
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <I2C_Master_enuReadu8Data>:

  I2C_Error_State I2C_Master_enuReadu8Data(u8* I2C_Data){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <I2C_Master_enuReadu8Data+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <I2C_Master_enuReadu8Data+0x8>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	8a 83       	std	Y+2, r24	; 0x02
    if(I2C_Data != NULL){
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	f9 f0       	breq	.+62     	; 0x19fa <I2C_Master_enuReadu8Data+0x56>
      I2C_Error_State state = NoError;
    19bc:	19 82       	std	Y+1, r1	; 0x01

  #if I2C_ACK_MODE == ACK_ENABLE
      /*Enable  ACK*/
      TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	84 ec       	ldi	r24, 0xC4	; 196
    19c4:	80 83       	st	Z, r24
      /*Disable  ACK*/
      TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
  #endif

      /*Wait for the flag*/
      while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    19c6:	e6 e5       	ldi	r30, 0x56	; 86
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	88 23       	and	r24, r24
    19ce:	dc f7       	brge	.-10     	; 0x19c6 <I2C_Master_enuReadu8Data+0x22>

      /*Check Status*/
  #if I2C_ACK_MODE == ACK_ENABLE
      if((TWSR & 0xF8) != I2C_MRXCheckData_WithAck){
    19d0:	e1 e2       	ldi	r30, 0x21	; 33
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	88 7f       	andi	r24, 0xF8	; 248
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	80 35       	cpi	r24, 0x50	; 80
    19e0:	91 05       	cpc	r25, r1
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <I2C_Master_enuReadu8Data+0x44>
        state = ErrorReadDataWithAck;
    19e4:	89 e0       	ldi	r24, 0x09	; 9
    19e6:	89 83       	std	Y+1, r24	; 0x01
  #elif  I2C_ACK_MODE == ACK_DISABLE
      if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
        state = ErrorReadDataWithoutAck;
      }
  #endif
      *I2C_Data = TWDR;
    19e8:	e3 e2       	ldi	r30, 0x23	; 35
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	ea 81       	ldd	r30, Y+2	; 0x02
    19f0:	fb 81       	ldd	r31, Y+3	; 0x03
    19f2:	80 83       	st	Z, r24
      return state;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <I2C_Master_enuReadu8Data+0x5a>
    }

    return -1;
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	8c 83       	std	Y+4, r24	; 0x04
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
  }
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <I2C_Master_voidFlush>:
  I2C_Error_State I2C_Master_voidFlush(){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    I2C_Error_State state = NoError;
    1a18:	19 82       	std	Y+1, r1	; 0x01

    /*Disable  ACK*/
    TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1a1a:	e6 e5       	ldi	r30, 0x56	; 86
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	84 e8       	ldi	r24, 0x84	; 132
    1a20:	80 83       	st	Z, r24

    /*Wait for the flag*/
    while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1a22:	e6 e5       	ldi	r30, 0x56	; 86
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	88 23       	and	r24, r24
    1a2a:	dc f7       	brge	.-10     	; 0x1a22 <I2C_Master_voidFlush+0x14>

    /*Check Status*/
    if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
    1a2c:	e1 e2       	ldi	r30, 0x21	; 33
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	88 7f       	andi	r24, 0xF8	; 248
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	88 35       	cpi	r24, 0x58	; 88
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <I2C_Master_voidFlush+0x36>
      state = ErrorReadDataWithoutAck;
    1a40:	8a e0       	ldi	r24, 0x0A	; 10
    1a42:	89 83       	std	Y+1, r24	; 0x01
    }

    return state;
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
  }
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <I2C_Master_enuSendStopCond>:

  void I2C_Master_enuSendStopCond(void){
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1a56:	e6 e5       	ldi	r30, 0x56	; 86
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	84 e9       	ldi	r24, 0x94	; 148
    1a5c:	80 83       	st	Z, r24

    /*Wait for the flag*/
    while(Get_Bit(TWCR,TWCR_TWSTO) == 1);
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	82 95       	swap	r24
    1a66:	8f 70       	andi	r24, 0x0F	; 15
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	88 23       	and	r24, r24
    1a72:	a9 f7       	brne	.-22     	; 0x1a5e <I2C_Master_enuSendStopCond+0x10>

  }
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <I2C_Slave_enuReadu8Data>:

  I2C_Error_State I2C_Slave_enuReadu8Data(u8* I2C_Data){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <I2C_Slave_enuReadu8Data+0x6>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01

    return 0;
    1a88:	80 e0       	ldi	r24, 0x00	; 0
  }
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
    1a9c:	af e5       	ldi	r26, 0x5F	; 95
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ef e5       	ldi	r30, 0x5F	; 95
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 68       	ori	r24, 0x80	; 128
    1aa8:	8c 93       	st	X, r24
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
    1ab8:	af e5       	ldi	r26, 0x5F	; 95
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ef e5       	ldi	r30, 0x5F	; 95
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 77       	andi	r24, 0x7F	; 127
    1ac4:	8c 93       	st	X, r24
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <EXTI0_voidInit>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI0_voidInit(void)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT0_SENSE_CONTROL == FALLING_EADGE
	/* ISC01 -> 1, ISC00 -> 0  */
	Set_Bit(MCUCR, MCUCR_ISC01);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC00);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC00);
	Clear_Bit(MCUCR, MCUCR_ISC01);
#else
#error "WRONG SENCE CONTROL"
#endif
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT0);
    1afe:	ab e5       	ldi	r26, 0x5B	; 91
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	eb e5       	ldi	r30, 0x5B	; 91
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT0);
    1b1a:	ab e5       	ldi	r26, 0x5B	; 91
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	eb e5       	ldi	r30, 0x5B	; 91
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 7b       	andi	r24, 0xBF	; 191
    1b26:	8c 93       	st	X, r24
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <EXT0_voidSetSignalch>:

void EXT0_voidSetSignalch(u8 SenseCpy)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <EXT0_voidSetSignalch+0x6>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	switch( SenseCpy )
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3b 83       	std	Y+3, r19	; 0x03
    1b44:	2a 83       	std	Y+2, r18	; 0x02
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	99 f1       	breq	.+102    	; 0x1bb6 <EXT0_voidSetSignalch+0x88>
    1b50:	2a 81       	ldd	r18, Y+2	; 0x02
    1b52:	3b 81       	ldd	r19, Y+3	; 0x03
    1b54:	23 30       	cpi	r18, 0x03	; 3
    1b56:	31 05       	cpc	r19, r1
    1b58:	34 f4       	brge	.+12     	; 0x1b66 <EXT0_voidSetSignalch+0x38>
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	c1 f1       	breq	.+112    	; 0x1bd4 <EXT0_voidSetSignalch+0xa6>
    1b64:	45 c0       	rjmp	.+138    	; 0x1bf0 <EXT0_voidSetSignalch+0xc2>
    1b66:	2a 81       	ldd	r18, Y+2	; 0x02
    1b68:	3b 81       	ldd	r19, Y+3	; 0x03
    1b6a:	23 30       	cpi	r18, 0x03	; 3
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	a1 f0       	breq	.+40     	; 0x1b98 <EXT0_voidSetSignalch+0x6a>
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	91 05       	cpc	r25, r1
    1b78:	d9 f5       	brne	.+118    	; 0x1bf0 <EXT0_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC01 -> 1, ISC00 -> 0  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1b7a:	a5 e5       	ldi	r26, 0x55	; 85
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e5       	ldi	r30, 0x55	; 85
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	82 60       	ori	r24, 0x02	; 2
    1b86:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1b88:	a5 e5       	ldi	r26, 0x55	; 85
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e5       	ldi	r30, 0x55	; 85
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	8c 93       	st	X, r24
    1b96:	2c c0       	rjmp	.+88     	; 0x1bf0 <EXT0_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC01 -> 1, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1b98:	a5 e5       	ldi	r26, 0x55	; 85
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e5 e5       	ldi	r30, 0x55	; 85
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	82 60       	ori	r24, 0x02	; 2
    1ba4:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    1ba6:	a5 e5       	ldi	r26, 0x55	; 85
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e5       	ldi	r30, 0x55	; 85
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	81 60       	ori	r24, 0x01	; 1
    1bb2:	8c 93       	st	X, r24
    1bb4:	1d c0       	rjmp	.+58     	; 0x1bf0 <EXT0_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC01 -> 0, ISC00 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1bb6:	a5 e5       	ldi	r26, 0x55	; 85
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e5       	ldi	r30, 0x55	; 85
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8d 7f       	andi	r24, 0xFD	; 253
    1bc2:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1bc4:	a5 e5       	ldi	r26, 0x55	; 85
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e5 e5       	ldi	r30, 0x55	; 85
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8e 7f       	andi	r24, 0xFE	; 254
    1bd0:	8c 93       	st	X, r24
    1bd2:	0e c0       	rjmp	.+28     	; 0x1bf0 <EXT0_voidSetSignalch+0xc2>

		break;
	case ON_CHANGE:
		/* ISC01 -> 0, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC00);
    1bd4:	a5 e5       	ldi	r26, 0x55	; 85
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e5 e5       	ldi	r30, 0x55	; 85
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1be2:	a5 e5       	ldi	r26, 0x55	; 85
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e5       	ldi	r30, 0x55	; 85
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8d 7f       	andi	r24, 0xFD	; 253
    1bee:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <EXTI1_voidInit>:

void EXTI1_voidInit(void)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT1_SENSE_CONTROL == FALLING_EADGE
	/* ISC11 -> 1, ISC10 -> 0  */
	Clear_Bit(MCUCR, MCUCR_ISC10);
    1c04:	a5 e5       	ldi	r26, 0x55	; 85
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e5       	ldi	r30, 0x55	; 85
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8b 7f       	andi	r24, 0xFB	; 251
    1c10:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC11);
    1c12:	a5 e5       	ldi	r26, 0x55	; 85
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e5       	ldi	r30, 0x55	; 85
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 60       	ori	r24, 0x08	; 8
    1c1e:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC11);
	Set_Bit(MCUCR, MCUCR_ISC10);

#error "WRONG SENCE CONTROL"
#endif
}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT1);
    1c2e:	ab e5       	ldi	r26, 0x5B	; 91
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e5       	ldi	r30, 0x5B	; 91
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	8c 93       	st	X, r24
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT1);
    1c4a:	ab e5       	ldi	r26, 0x5B	; 91
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	eb e5       	ldi	r30, 0x5B	; 91
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 77       	andi	r24, 0x7F	; 127
    1c56:	8c 93       	st	X, r24
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <EXT1_voidSetSignalch>:

void EXT1_voidSetSignalch(u8 SenseCpy)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <EXT1_voidSetSignalch+0x6>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01

	switch (SenseCpy)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3b 83       	std	Y+3, r19	; 0x03
    1c74:	2a 83       	std	Y+2, r18	; 0x02
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	99 f1       	breq	.+102    	; 0x1ce6 <EXT1_voidSetSignalch+0x88>
    1c80:	2a 81       	ldd	r18, Y+2	; 0x02
    1c82:	3b 81       	ldd	r19, Y+3	; 0x03
    1c84:	23 30       	cpi	r18, 0x03	; 3
    1c86:	31 05       	cpc	r19, r1
    1c88:	34 f4       	brge	.+12     	; 0x1c96 <EXT1_voidSetSignalch+0x38>
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	c1 f1       	breq	.+112    	; 0x1d04 <EXT1_voidSetSignalch+0xa6>
    1c94:	45 c0       	rjmp	.+138    	; 0x1d20 <EXT1_voidSetSignalch+0xc2>
    1c96:	2a 81       	ldd	r18, Y+2	; 0x02
    1c98:	3b 81       	ldd	r19, Y+3	; 0x03
    1c9a:	23 30       	cpi	r18, 0x03	; 3
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	a1 f0       	breq	.+40     	; 0x1cc8 <EXT1_voidSetSignalch+0x6a>
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	d9 f5       	brne	.+118    	; 0x1d20 <EXT1_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC11 -> 1, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1caa:	a5 e5       	ldi	r26, 0x55	; 85
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e5       	ldi	r30, 0x55	; 85
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8b 7f       	andi	r24, 0xFB	; 251
    1cb6:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1cb8:	a5 e5       	ldi	r26, 0x55	; 85
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e5 e5       	ldi	r30, 0x55	; 85
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 60       	ori	r24, 0x08	; 8
    1cc4:	8c 93       	st	X, r24
    1cc6:	2c c0       	rjmp	.+88     	; 0x1d20 <EXT1_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC10);
    1cc8:	a5 e5       	ldi	r26, 0x55	; 85
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e5       	ldi	r30, 0x55	; 85
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1cd6:	a5 e5       	ldi	r26, 0x55	; 85
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e5 e5       	ldi	r30, 0x55	; 85
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 60       	ori	r24, 0x08	; 8
    1ce2:	8c 93       	st	X, r24
    1ce4:	1d c0       	rjmp	.+58     	; 0x1d20 <EXT1_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC11 -> 0, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1ce6:	a5 e5       	ldi	r26, 0x55	; 85
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e5       	ldi	r30, 0x55	; 85
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8b 7f       	andi	r24, 0xFB	; 251
    1cf2:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1cf4:	a5 e5       	ldi	r26, 0x55	; 85
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e5 e5       	ldi	r30, 0x55	; 85
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	87 7f       	andi	r24, 0xF7	; 247
    1d00:	8c 93       	st	X, r24
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <EXT1_voidSetSignalch+0xc2>
		break;
	case ON_CHANGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1d04:	a5 e5       	ldi	r26, 0x55	; 85
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e5       	ldi	r30, 0x55	; 85
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	87 7f       	andi	r24, 0xF7	; 247
    1d10:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC10);
    1d12:	a5 e5       	ldi	r26, 0x55	; 85
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e5 e5       	ldi	r30, 0x55	; 85
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	84 60       	ori	r24, 0x04	; 4
    1d1e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <EXTI2_voidInit>:


// INTERRUPT 1
void EXTI2_voidInit(void)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62

#if 	SELECT_INT2_SENSE_CONTROL == FALLING_EADGE
	Clear_Bit(MCUCR, MCUCSR_ISC2);
    1d34:	a5 e5       	ldi	r26, 0x55	; 85
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e5 e5       	ldi	r30, 0x55	; 85
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 7b       	andi	r24, 0xBF	; 191
    1d40:	8c 93       	st	X, r24
#elif 	SELECT_INT2_SENSE_CONTROL == RISING_EADGE
	Set_Bit(MCUCR, MCUCSR_ISC2);
#else
#endif

}
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <EXTI2_voidEnable>:

//enable EXTI
void EXTI2_voidEnable(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT2);
    1d50:	ab e5       	ldi	r26, 0x5B	; 91
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	eb e5       	ldi	r30, 0x5B	; 91
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 62       	ori	r24, 0x20	; 32
    1d5c:	8c 93       	st	X, r24
}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <EXTI2_voidDisable>:

//disable EXTI
void EXTI2_voidDisable(void)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT2);
    1d6c:	ab e5       	ldi	r26, 0x5B	; 91
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	eb e5       	ldi	r30, 0x5B	; 91
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7d       	andi	r24, 0xDF	; 223
    1d78:	8c 93       	st	X, r24
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <EXT2_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <EXT2_voidSetSignalch+0x6>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3b 83       	std	Y+3, r19	; 0x03
    1d96:	2a 83       	std	Y+2, r18	; 0x02
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	69 f0       	breq	.+26     	; 0x1dbc <EXT2_voidSetSignalch+0x3c>
    1da2:	2a 81       	ldd	r18, Y+2	; 0x02
    1da4:	3b 81       	ldd	r19, Y+3	; 0x03
    1da6:	24 30       	cpi	r18, 0x04	; 4
    1da8:	31 05       	cpc	r19, r1
    1daa:	79 f4       	brne	.+30     	; 0x1dca <EXT2_voidSetSignalch+0x4a>
	{
	case FALLING_EADGE:
		Clear_Bit(MCUCR, MCUCSR_ISC2);
    1dac:	a5 e5       	ldi	r26, 0x55	; 85
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e5       	ldi	r30, 0x55	; 85
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7b       	andi	r24, 0xBF	; 191
    1db8:	8c 93       	st	X, r24
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <EXT2_voidSetSignalch+0x4a>
		break;
	case RISING_EADGE:
		Set_Bit(MCUCR, MCUCSR_ISC2);
    1dbc:	a5 e5       	ldi	r26, 0x55	; 85
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e5       	ldi	r30, 0x55	; 85
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	80 64       	ori	r24, 0x40	; 64
    1dc8:	8c 93       	st	X, r24
		break;

	}
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <EXT0_VID_SET_CALL_BACK>:



//callback function
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <EXT0_VID_SET_CALL_BACK+0x6>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	31 f0       	breq	.+12     	; 0x1df8 <EXT0_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT0Func = PTR;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	90 93 bb 01 	sts	0x01BB, r25
    1df4:	80 93 ba 01 	sts	0x01BA, r24
	}
	else
	{

	}
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <EXT1_VID_SET_CALL_BACK+0x6>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <EXT1_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT1Func = PTR;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	90 93 bd 01 	sts	0x01BD, r25
    1e20:	80 93 bc 01 	sts	0x01BC, r24
	}
	else
	{

	}
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <EXT2_VID_SET_CALL_BACK+0x6>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <EXT2_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT2Func = PTR;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	90 93 bf 01 	sts	0x01BF, r25
    1e4c:	80 93 be 01 	sts	0x01BE, r24
	}
	else
	{

	}
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <__vector_1>:



void __vector_1(void)__attribute__((signal,used, externally_visible));
void __vector_1(void)
{
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
    1e84:	80 91 ba 01 	lds	r24, 0x01BA
    1e88:	90 91 bb 01 	lds	r25, 0x01BB
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <__vector_1+0x40>
	{
		EXTI_pvINT0Func();
    1e90:	e0 91 ba 01 	lds	r30, 0x01BA
    1e94:	f0 91 bb 01 	lds	r31, 0x01BB
    1e98:	09 95       	icall
	}
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	bf 91       	pop	r27
    1ea4:	af 91       	pop	r26
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	7f 91       	pop	r23
    1eac:	6f 91       	pop	r22
    1eae:	5f 91       	pop	r21
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_2>:

void __vector_2(void)__attribute__((signal,used, externally_visible));
void __vector_2(void)
{
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	2f 93       	push	r18
    1ecc:	3f 93       	push	r19
    1ece:	4f 93       	push	r20
    1ed0:	5f 93       	push	r21
    1ed2:	6f 93       	push	r22
    1ed4:	7f 93       	push	r23
    1ed6:	8f 93       	push	r24
    1ed8:	9f 93       	push	r25
    1eda:	af 93       	push	r26
    1edc:	bf 93       	push	r27
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
    1eea:	80 91 bc 01 	lds	r24, 0x01BC
    1eee:	90 91 bd 01 	lds	r25, 0x01BD
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	29 f0       	breq	.+10     	; 0x1f00 <__vector_2+0x40>
	{
		EXTI_pvINT1Func();
    1ef6:	e0 91 bc 01 	lds	r30, 0x01BC
    1efa:	f0 91 bd 01 	lds	r31, 0x01BD
    1efe:	09 95       	icall
	}
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__vector_3>:

void __vector_3(void)__attribute__((signal,used, externally_visible));
void __vector_3(void)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
    1f50:	80 91 be 01 	lds	r24, 0x01BE
    1f54:	90 91 bf 01 	lds	r25, 0x01BF
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	29 f0       	breq	.+10     	; 0x1f66 <__vector_3+0x40>
	{
		EXTI_pvINT2Func();
    1f5c:	e0 91 be 01 	lds	r30, 0x01BE
    1f60:	f0 91 bf 01 	lds	r31, 0x01BF
    1f64:	09 95       	icall
	}
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <DIO_u8SetPinValue+0x6>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <DIO_u8SetPinValue+0x8>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <DIO_u8SetPinValue+0xa>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	6b 83       	std	Y+3, r22	; 0x03
    1f9e:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    1fa0:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	3e 83       	std	Y+6, r19	; 0x06
    1faa:	2d 83       	std	Y+5, r18	; 0x05
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <DIO_u8SetPinValue+0x2c>
    1fb6:	49 c0       	rjmp	.+146    	; 0x204a <DIO_u8SetPinValue+0xbe>
    1fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1fba:	3e 81       	ldd	r19, Y+6	; 0x06
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <DIO_u8SetPinValue+0x40>
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	71 f0       	breq	.+28     	; 0x1fe6 <DIO_u8SetPinValue+0x5a>
    1fca:	d4 c0       	rjmp	.+424    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
    1fcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1fce:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd0:	22 30       	cpi	r18, 0x02	; 2
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <DIO_u8SetPinValue+0x4c>
    1fd6:	6b c0       	rjmp	.+214    	; 0x20ae <DIO_u8SetPinValue+0x122>
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <DIO_u8SetPinValue+0x58>
    1fe2:	97 c0       	rjmp	.+302    	; 0x2112 <DIO_u8SetPinValue+0x186>
    1fe4:	c7 c0       	rjmp	.+398    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	a1 f4       	brne	.+40     	; 0x2014 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    1fec:	ab e3       	ldi	r26, 0x3B	; 59
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e3       	ldi	r30, 0x3B	; 59
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <DIO_u8SetPinValue+0x7e>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <DIO_u8SetPinValue+0x7a>
    200e:	84 2b       	or	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	b0 c0       	rjmp	.+352    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	88 23       	and	r24, r24
    2018:	a9 f4       	brne	.+42     	; 0x2044 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    201a:	ab e3       	ldi	r26, 0x3B	; 59
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	eb e3       	ldi	r30, 0x3B	; 59
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_u8SetPinValue+0xac>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_u8SetPinValue+0xa8>
    203c:	80 95       	com	r24
    203e:	84 23       	and	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	98 c0       	rjmp	.+304    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	95 c0       	rjmp	.+298    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	a1 f4       	brne	.+40     	; 0x2078 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    2050:	a8 e3       	ldi	r26, 0x38	; 56
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e8 e3       	ldi	r30, 0x38	; 56
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_u8SetPinValue+0xe2>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_u8SetPinValue+0xde>
    2072:	84 2b       	or	r24, r20
    2074:	8c 93       	st	X, r24
    2076:	7e c0       	rjmp	.+252    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	88 23       	and	r24, r24
    207c:	a9 f4       	brne	.+42     	; 0x20a8 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    207e:	a8 e3       	ldi	r26, 0x38	; 56
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e8 e3       	ldi	r30, 0x38	; 56
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_u8SetPinValue+0x110>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_u8SetPinValue+0x10c>
    20a0:	80 95       	com	r24
    20a2:	84 23       	and	r24, r20
    20a4:	8c 93       	st	X, r24
    20a6:	66 c0       	rjmp	.+204    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	63 c0       	rjmp	.+198    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	a1 f4       	brne	.+40     	; 0x20dc <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    20b4:	a5 e3       	ldi	r26, 0x35	; 53
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e5 e3       	ldi	r30, 0x35	; 53
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_u8SetPinValue+0x146>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_u8SetPinValue+0x142>
    20d6:	84 2b       	or	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	4c c0       	rjmp	.+152    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	88 23       	and	r24, r24
    20e0:	a9 f4       	brne	.+42     	; 0x210c <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    20e2:	a5 e3       	ldi	r26, 0x35	; 53
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e5 e3       	ldi	r30, 0x35	; 53
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_u8SetPinValue+0x174>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_u8SetPinValue+0x170>
    2104:	80 95       	com	r24
    2106:	84 23       	and	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	34 c0       	rjmp	.+104    	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	31 c0       	rjmp	.+98     	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	a1 f4       	brne	.+40     	; 0x2140 <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    2118:	a2 e3       	ldi	r26, 0x32	; 50
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e2 e3       	ldi	r30, 0x32	; 50
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <DIO_u8SetPinValue+0x1aa>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <DIO_u8SetPinValue+0x1a6>
    213a:	84 2b       	or	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	1a c0       	rjmp	.+52     	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	88 23       	and	r24, r24
    2144:	a9 f4       	brne	.+42     	; 0x2170 <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    2146:	a2 e3       	ldi	r26, 0x32	; 50
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e2 e3       	ldi	r30, 0x32	; 50
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	48 2f       	mov	r20, r24
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	02 2e       	mov	r0, r18
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <DIO_u8SetPinValue+0x1d8>
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	0a 94       	dec	r0
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <DIO_u8SetPinValue+0x1d4>
    2168:	80 95       	com	r24
    216a:	84 23       	and	r24, r20
    216c:	8c 93       	st	X, r24
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
}
    2176:	26 96       	adiw	r28, 0x06	; 6
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <DIO_u8SetPortValue+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_u8SetPortValue+0x8>
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8a 83       	std	Y+2, r24	; 0x02
    2198:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    219a:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	84 30       	cpi	r24, 0x04	; 4
    21a0:	98 f5       	brcc	.+102    	; 0x2208 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	3d 83       	std	Y+5, r19	; 0x05
    21aa:	2c 83       	std	Y+4, r18	; 0x04
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	91 05       	cpc	r25, r1
    21b4:	d1 f0       	breq	.+52     	; 0x21ea <DIO_u8SetPortValue+0x62>
    21b6:	2c 81       	ldd	r18, Y+4	; 0x04
    21b8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	2c f4       	brge	.+10     	; 0x21ca <DIO_u8SetPortValue+0x42>
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	9d 81       	ldd	r25, Y+5	; 0x05
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <DIO_u8SetPortValue+0x58>
    21c8:	21 c0       	rjmp	.+66     	; 0x220c <DIO_u8SetPortValue+0x84>
    21ca:	2c 81       	ldd	r18, Y+4	; 0x04
    21cc:	3d 81       	ldd	r19, Y+5	; 0x05
    21ce:	22 30       	cpi	r18, 0x02	; 2
    21d0:	31 05       	cpc	r19, r1
    21d2:	81 f0       	breq	.+32     	; 0x21f4 <DIO_u8SetPortValue+0x6c>
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	83 30       	cpi	r24, 0x03	; 3
    21da:	91 05       	cpc	r25, r1
    21dc:	81 f0       	breq	.+32     	; 0x21fe <DIO_u8SetPortValue+0x76>
    21de:	16 c0       	rjmp	.+44     	; 0x220c <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    21e0:	eb e3       	ldi	r30, 0x3B	; 59
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 83       	st	Z, r24
    21e8:	11 c0       	rjmp	.+34     	; 0x220c <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    21ea:	e8 e3       	ldi	r30, 0x38	; 56
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	80 83       	st	Z, r24
    21f2:	0c c0       	rjmp	.+24     	; 0x220c <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    21f4:	e5 e3       	ldi	r30, 0x35	; 53
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	80 83       	st	Z, r24
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    21fe:	e2 e3       	ldi	r30, 0x32	; 50
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	80 83       	st	Z, r24
    2206:	02 c0       	rjmp	.+4      	; 0x220c <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	27 97       	sbiw	r28, 0x07	; 7
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	6a 83       	std	Y+2, r22	; 0x02
    2236:	5c 83       	std	Y+4, r21	; 0x04
    2238:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	3f 83       	std	Y+7, r19	; 0x07
    2242:	2e 83       	std	Y+6, r18	; 0x06
    2244:	4e 81       	ldd	r20, Y+6	; 0x06
    2246:	5f 81       	ldd	r21, Y+7	; 0x07
    2248:	41 30       	cpi	r20, 0x01	; 1
    224a:	51 05       	cpc	r21, r1
    224c:	59 f1       	breq	.+86     	; 0x22a4 <DIO_GetPinValue+0x86>
    224e:	8e 81       	ldd	r24, Y+6	; 0x06
    2250:	9f 81       	ldd	r25, Y+7	; 0x07
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	91 05       	cpc	r25, r1
    2256:	34 f4       	brge	.+12     	; 0x2264 <DIO_GetPinValue+0x46>
    2258:	2e 81       	ldd	r18, Y+6	; 0x06
    225a:	3f 81       	ldd	r19, Y+7	; 0x07
    225c:	21 15       	cp	r18, r1
    225e:	31 05       	cpc	r19, r1
    2260:	69 f0       	breq	.+26     	; 0x227c <DIO_GetPinValue+0x5e>
    2262:	5c c0       	rjmp	.+184    	; 0x231c <DIO_GetPinValue+0xfe>
    2264:	4e 81       	ldd	r20, Y+6	; 0x06
    2266:	5f 81       	ldd	r21, Y+7	; 0x07
    2268:	42 30       	cpi	r20, 0x02	; 2
    226a:	51 05       	cpc	r21, r1
    226c:	79 f1       	breq	.+94     	; 0x22cc <DIO_GetPinValue+0xae>
    226e:	8e 81       	ldd	r24, Y+6	; 0x06
    2270:	9f 81       	ldd	r25, Y+7	; 0x07
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	91 05       	cpc	r25, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <DIO_GetPinValue+0x5c>
    2278:	3d c0       	rjmp	.+122    	; 0x22f4 <DIO_GetPinValue+0xd6>
    227a:	50 c0       	rjmp	.+160    	; 0x231c <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    227c:	e9 e3       	ldi	r30, 0x39	; 57
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a9 01       	movw	r20, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_GetPinValue+0x76>
    2290:	55 95       	asr	r21
    2292:	47 95       	ror	r20
    2294:	8a 95       	dec	r24
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_GetPinValue+0x72>
    2298:	ca 01       	movw	r24, r20
    229a:	81 70       	andi	r24, 0x01	; 1
    229c:	eb 81       	ldd	r30, Y+3	; 0x03
    229e:	fc 81       	ldd	r31, Y+4	; 0x04
    22a0:	80 83       	st	Z, r24
    22a2:	3e c0       	rjmp	.+124    	; 0x2320 <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    22a4:	e6 e3       	ldi	r30, 0x36	; 54
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a9 01       	movw	r20, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_GetPinValue+0x9e>
    22b8:	55 95       	asr	r21
    22ba:	47 95       	ror	r20
    22bc:	8a 95       	dec	r24
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_GetPinValue+0x9a>
    22c0:	ca 01       	movw	r24, r20
    22c2:	81 70       	andi	r24, 0x01	; 1
    22c4:	eb 81       	ldd	r30, Y+3	; 0x03
    22c6:	fc 81       	ldd	r31, Y+4	; 0x04
    22c8:	80 83       	st	Z, r24
    22ca:	2a c0       	rjmp	.+84     	; 0x2320 <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    22cc:	e3 e3       	ldi	r30, 0x33	; 51
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a9 01       	movw	r20, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_GetPinValue+0xc6>
    22e0:	55 95       	asr	r21
    22e2:	47 95       	ror	r20
    22e4:	8a 95       	dec	r24
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_GetPinValue+0xc2>
    22e8:	ca 01       	movw	r24, r20
    22ea:	81 70       	andi	r24, 0x01	; 1
    22ec:	eb 81       	ldd	r30, Y+3	; 0x03
    22ee:	fc 81       	ldd	r31, Y+4	; 0x04
    22f0:	80 83       	st	Z, r24
    22f2:	16 c0       	rjmp	.+44     	; 0x2320 <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    22f4:	e0 e3       	ldi	r30, 0x30	; 48
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a9 01       	movw	r20, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <DIO_GetPinValue+0xee>
    2308:	55 95       	asr	r21
    230a:	47 95       	ror	r20
    230c:	8a 95       	dec	r24
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <DIO_GetPinValue+0xea>
    2310:	ca 01       	movw	r24, r20
    2312:	81 70       	andi	r24, 0x01	; 1
    2314:	eb 81       	ldd	r30, Y+3	; 0x03
    2316:	fc 81       	ldd	r31, Y+4	; 0x04
    2318:	80 83       	st	Z, r24
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_GetPinValue+0x102>
        break;

    default:
    	return NOK;
    231c:	1d 82       	std	Y+5, r1	; 0x05
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <DIO_GetPinValue+0x106>
        break;
    }

    return OK;
    2320:	51 e0       	ldi	r21, 0x01	; 1
    2322:	5d 83       	std	Y+5, r21	; 0x05
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2326:	27 96       	adiw	r28, 0x07	; 7
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    2344:	eb e3       	ldi	r30, 0x3B	; 59
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <ADC_voidInit>:

void (*ADC_pvFunc)(void);


void ADC_voidInit()
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62

#if 	VOLTAGE_REFERENCE == AVCC
	/* REFS1 -> 0, REFS0 -> 1 */
	Set_Bit(ADMUX, ADMUX_REFS0);
    235c:	a7 e2       	ldi	r26, 0x27	; 39
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e7 e2       	ldi	r30, 0x27	; 39
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 64       	ori	r24, 0x40	; 64
    2368:	8c 93       	st	X, r24
	Clear_Bit(ADMUX, ADMUX_REFS1);
    236a:	a7 e2       	ldi	r26, 0x27	; 39
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e7 e2       	ldi	r30, 0x27	; 39
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	8f 77       	andi	r24, 0x7F	; 127
    2376:	8c 93       	st	X, r24
	Vref = 5;
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 ea       	ldi	r26, 0xA0	; 160
    237e:	b0 e4       	ldi	r27, 0x40	; 64
    2380:	80 93 84 01 	sts	0x0184, r24
    2384:	90 93 85 01 	sts	0x0185, r25
    2388:	a0 93 86 01 	sts	0x0186, r26
    238c:	b0 93 87 01 	sts	0x0187, r27
	Clear_Bit(ADCSRA, ADCSRA_ADPS0);
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
#elif ADC_PRESCALER_SELECTION == DIVIDE_BY_128
	/* ADPS2 -> 1,  ADPS1 -> 1, ADPS0 -> 1 */
	Set_Bit(ADCSRA, ADCSRA_ADPS0);
    2390:	a6 e2       	ldi	r26, 0x26	; 38
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e6 e2       	ldi	r30, 0x26	; 38
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	81 60       	ori	r24, 0x01	; 1
    239c:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
    239e:	a6 e2       	ldi	r26, 0x26	; 38
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e6 e2       	ldi	r30, 0x26	; 38
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	82 60       	ori	r24, 0x02	; 2
    23aa:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
    23ac:	a6 e2       	ldi	r26, 0x26	; 38
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e6 e2       	ldi	r30, 0x26	; 38
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	84 60       	ori	r24, 0x04	; 4
    23b8:	8c 93       	st	X, r24
#endif

#if		ADJUSTMENT == LEFT_ADJUSTMENT
	Set_Bit(ADMUX, ADMUX_ADLAR);
#elif   ADJUSTMENT == RIGHT_ADJUSTMENT
	Clear_Bit(ADMUX, ADMUX_ADLAR);
    23ba:	a7 e2       	ldi	r26, 0x27	; 39
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e7 e2       	ldi	r30, 0x27	; 39
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7d       	andi	r24, 0xDF	; 223
    23c6:	8c 93       	st	X, r24

#else
#error
#endif

}
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <ADC_voidEnable>:


void ADC_voidEnable()
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADEN);
    23d6:	a6 e2       	ldi	r26, 0x26	; 38
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e6 e2       	ldi	r30, 0x26	; 38
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 68       	ori	r24, 0x80	; 128
    23e2:	8c 93       	st	X, r24
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADIE);
    23f2:	a6 e2       	ldi	r26, 0x26	; 38
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e6 e2       	ldi	r30, 0x26	; 38
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	88 60       	ori	r24, 0x08	; 8
    23fe:	8c 93       	st	X, r24
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <ADC_voidDisable>:

void ADC_voidDisable()
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADEN);
    240e:	a6 e2       	ldi	r26, 0x26	; 38
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e6 e2       	ldi	r30, 0x26	; 38
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8f 77       	andi	r24, 0x7F	; 127
    241a:	8c 93       	st	X, r24
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC()
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <ADC_u16ReadADC+0x6>
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result=0;
    242c:	1a 82       	std	Y+2, r1	; 0x02
    242e:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = ( ADC_10Bit * Vref) / 1024;
    2430:	e4 e2       	ldi	r30, 0x24	; 36
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	cc 01       	movw	r24, r24
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	20 91 84 01 	lds	r18, 0x0184
    244e:	30 91 85 01 	lds	r19, 0x0185
    2452:	40 91 86 01 	lds	r20, 0x0186
    2456:	50 91 87 01 	lds	r21, 0x0187
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    24a4:	a7 e2       	ldi	r26, 0x27	; 39
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e7 e2       	ldi	r30, 0x27	; 39
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	80 7e       	andi	r24, 0xE0	; 224
    24b0:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    24b2:	a7 e2       	ldi	r26, 0x27	; 39
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e7 e2       	ldi	r30, 0x27	; 39
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	90 81       	ld	r25, Z
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	89 2b       	or	r24, r25
    24c0:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    24c2:	a6 e2       	ldi	r26, 0x26	; 38
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e6 e2       	ldi	r30, 0x26	; 38
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 64       	ori	r24, 0x40	; 64
    24ce:	8c 93       	st	X, r24

	// Polling { Busy Waiting } until conversion complete
	while( Get_Bit(ADCSRA, ADCSRA_ADIF) == 0 );
    24d0:	e6 e2       	ldi	r30, 0x26	; 38
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	82 95       	swap	r24
    24d8:	8f 70       	andi	r24, 0x0F	; 15
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	81 70       	andi	r24, 0x01	; 1
    24e0:	90 70       	andi	r25, 0x00	; 0
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	a9 f3       	breq	.-22     	; 0x24d0 <ADC_voidStartConversion+0x38>

	// Clear Conversion Flag
	Set_Bit(ADCSRA, ADCSRA_ADIF);
    24e6:	a6 e2       	ldi	r26, 0x26	; 38
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e6 e2       	ldi	r30, 0x26	; 38
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	80 61       	ori	r24, 0x10	; 16
    24f2:	8c 93       	st	X, r24

}
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 Copy_u8Channel)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    2508:	a7 e2       	ldi	r26, 0x27	; 39
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e7 e2       	ldi	r30, 0x27	; 39
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 7e       	andi	r24, 0xE0	; 224
    2514:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    2516:	a7 e2       	ldi	r26, 0x27	; 39
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e7 e2       	ldi	r30, 0x27	; 39
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	90 81       	ld	r25, Z
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	89 2b       	or	r24, r25
    2524:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    2526:	a6 e2       	ldi	r26, 0x26	; 38
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e6 e2       	ldi	r30, 0x26	; 38
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	80 64       	ori	r24, 0x40	; 64
    2532:	8c 93       	st	X, r24

}
    2534:	0f 90       	pop	r0
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <ADC_u16ReadADCInMV>:


u16 ADC_u16ReadADCInMV()
{
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <ADC_u16ReadADCInMV+0xe>
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result= 0;
    254e:	1a 82       	std	Y+2, r1	; 0x02
    2550:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = (ADC_10Bit * 1000UL * (u8)Vref) / 1024UL;
    2552:	e4 e2       	ldi	r30, 0x24	; 36
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	7c 01       	movw	r14, r24
    255c:	00 e0       	ldi	r16, 0x00	; 0
    255e:	10 e0       	ldi	r17, 0x00	; 0
    2560:	80 91 84 01 	lds	r24, 0x0184
    2564:	90 91 85 01 	lds	r25, 0x0185
    2568:	a0 91 86 01 	lds	r26, 0x0186
    256c:	b0 91 87 01 	lds	r27, 0x0187
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	c8 01       	movw	r24, r16
    2586:	b7 01       	movw	r22, r14
    2588:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsi3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	28 ee       	ldi	r18, 0xE8	; 232
    2592:	33 e0       	ldi	r19, 0x03	; 3
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 b3 20 	call	0x4166	; 0x4166 <__mulsi3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	07 2e       	mov	r0, r23
    25a6:	7a e0       	ldi	r23, 0x0A	; 10
    25a8:	b6 95       	lsr	r27
    25aa:	a7 95       	ror	r26
    25ac:	97 95       	ror	r25
    25ae:	87 95       	ror	r24
    25b0:	7a 95       	dec	r23
    25b2:	d1 f7       	brne	.-12     	; 0x25a8 <ADC_u16ReadADCInMV+0x6c>
    25b4:	70 2d       	mov	r23, r0
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01

	return (u16)ADC_Result;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02

}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	08 95       	ret

000025d0 <ADC_voidDisableInt>:

void ADC_voidDisableInt()
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADIE);
    25d8:	a6 e2       	ldi	r26, 0x26	; 38
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e6 e2       	ldi	r30, 0x26	; 38
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	87 7f       	andi	r24, 0xF7	; 247
    25e4:	8c 93       	st	X, r24
}
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <ADC_SetCallback>:

void ADC_SetCallback( void (*ptr) (void) )
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <ADC_SetCallback+0x6>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
	if( ptr != NULL )
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	31 f0       	breq	.+12     	; 0x260e <ADC_SetCallback+0x22>
	{
		ADC_pvFunc = ptr;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	90 93 cc 01 	sts	0x01CC, r25
    260a:	80 93 cb 01 	sts	0x01CB, r24
	}
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <__vector_16>:


void __vector_16(void)__attribute__((signal,used, externally_visible));
void __vector_16(void)
{
    2618:	1f 92       	push	r1
    261a:	0f 92       	push	r0
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	0f 92       	push	r0
    2620:	11 24       	eor	r1, r1
    2622:	2f 93       	push	r18
    2624:	3f 93       	push	r19
    2626:	4f 93       	push	r20
    2628:	5f 93       	push	r21
    262a:	6f 93       	push	r22
    262c:	7f 93       	push	r23
    262e:	8f 93       	push	r24
    2630:	9f 93       	push	r25
    2632:	af 93       	push	r26
    2634:	bf 93       	push	r27
    2636:	ef 93       	push	r30
    2638:	ff 93       	push	r31
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pvFunc != NULL )
    2642:	80 91 cb 01 	lds	r24, 0x01CB
    2646:	90 91 cc 01 	lds	r25, 0x01CC
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	29 f0       	breq	.+10     	; 0x2658 <__vector_16+0x40>
	{
		ADC_pvFunc();
    264e:	e0 91 cb 01 	lds	r30, 0x01CB
    2652:	f0 91 cc 01 	lds	r31, 0x01CC
    2656:	09 95       	icall
	}
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	ff 91       	pop	r31
    265e:	ef 91       	pop	r30
    2660:	bf 91       	pop	r27
    2662:	af 91       	pop	r26
    2664:	9f 91       	pop	r25
    2666:	8f 91       	pop	r24
    2668:	7f 91       	pop	r23
    266a:	6f 91       	pop	r22
    266c:	5f 91       	pop	r21
    266e:	4f 91       	pop	r20
    2670:	3f 91       	pop	r19
    2672:	2f 91       	pop	r18
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	0f 90       	pop	r0
    267a:	1f 90       	pop	r1
    267c:	18 95       	reti

0000267e <RTC_Read_Calendar>:
extern Date;
extern Mon;
extern Year;

void RTC_Read_Calendar(void)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    2686:	0e 94 12 0c 	call	0x1824	; 0x1824 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    268a:	80 ed       	ldi	r24, 0xD0	; 208
    268c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(RTC_CALENDAR_ADDRESS);
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    2696:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(RTC_SLAVE_ADDRESS);
    269a:	80 ed       	ldi	r24, 0xD0	; 208
    269c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <I2C_Master_enuSendSlaveAddressWithRead>

	I2C_Master_enuReadu8Data(&Day);
    26a0:	87 ec       	ldi	r24, 0xC7	; 199
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&Date);
    26a8:	88 ec       	ldi	r24, 0xC8	; 200
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&Mon);
    26b0:	89 ec       	ldi	r24, 0xC9	; 201
    26b2:	91 e0       	ldi	r25, 0x01	; 1
    26b4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&Year);
    26b8:	8a ec       	ldi	r24, 0xCA	; 202
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>

	I2C_Master_voidFlush();
    26c0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    26c4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <I2C_Master_enuSendStopCond>

}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <RTC_Write_Calendar>:

void RTC_Write_Calendar( u8 _date, u8 _day, u8 _mon, u8 _year  )
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <RTC_Write_Calendar+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <RTC_Write_Calendar+0x8>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	6a 83       	std	Y+2, r22	; 0x02
    26de:	4b 83       	std	Y+3, r20	; 0x03
    26e0:	2c 83       	std	Y+4, r18	; 0x04
	I2C_Master_enuSendStartCond();
    26e2:	0e 94 12 0c 	call	0x1824	; 0x1824 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    26e6:	80 ed       	ldi	r24, 0xD0	; 208
    26e8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(RTC_CALENDAR_ADDRESS);
    26ec:	83 e0       	ldi	r24, 0x03	; 3
    26ee:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>

	I2C_Master_enuSendu8Data(_day);
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_date);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_mon);
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_year);
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>

	I2C_Master_enuSendStopCond();
    270a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <I2C_Master_enuSendStopCond>

}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <RTC_Write_Clock>:

void RTC_Write_Clock( u8 _sec, u8 _min, u8 _hour)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	00 d0       	rcall	.+0      	; 0x2722 <RTC_Write_Clock+0x6>
    2722:	0f 92       	push	r0
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	6a 83       	std	Y+2, r22	; 0x02
    272c:	4b 83       	std	Y+3, r20	; 0x03
	I2C_Master_enuSendStartCond();
    272e:	0e 94 12 0c 	call	0x1824	; 0x1824 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    2732:	80 ed       	ldi	r24, 0xD0	; 208
    2734:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(RTC_CLOCK_ADDRESS);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>

	I2C_Master_enuSendu8Data(_sec);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_min);
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_hour);
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>

	I2C_Master_enuSendStopCond();
    2750:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <I2C_Master_enuSendStopCond>

}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <RTC_Read_Time>:

void RTC_Read_Time(void)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    2768:	0e 94 12 0c 	call	0x1824	; 0x1824 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    276c:	80 ed       	ldi	r24, 0xD0	; 208
    276e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(RTC_CLOCK_ADDRESS);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 ac 0c 	call	0x1958	; 0x1958 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    2778:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(RTC_SLAVE_ADDRESS);
    277c:	80 ed       	ldi	r24, 0xD0	; 208
    277e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <I2C_Master_enuSendSlaveAddressWithRead>

	I2C_Master_enuReadu8Data(&Sec);
    2782:	84 ec       	ldi	r24, 0xC4	; 196
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&Min);
    278a:	85 ec       	ldi	r24, 0xC5	; 197
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&Hour);
    2792:	86 ec       	ldi	r24, 0xC6	; 198
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_Master_enuReadu8Data>

	I2C_Master_voidFlush();
    279a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    279e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <I2C_Master_enuSendStopCond>

}
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    27a8:	0f 93       	push	r16
    27aa:	1f 93       	push	r17
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	cc 58       	subi	r28, 0x8C	; 140
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	fe 01       	movw	r30, r28
    27c4:	e7 57       	subi	r30, 0x77	; 119
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	ac e0       	ldi	r26, 0x0C	; 12
    27ce:	b2 e4       	ldi	r27, 0x42	; 66
    27d0:	80 83       	st	Z, r24
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	a2 83       	std	Z+2, r26	; 0x02
    27d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	8e 01       	movw	r16, r28
    27da:	0b 57       	subi	r16, 0x7B	; 123
    27dc:	1f 4f       	sbci	r17, 0xFF	; 255
    27de:	fe 01       	movw	r30, r28
    27e0:	e7 57       	subi	r30, 0x77	; 119
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	4a e7       	ldi	r20, 0x7A	; 122
    27f2:	55 e4       	ldi	r21, 0x45	; 69
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	f8 01       	movw	r30, r16
    27fe:	80 83       	st	Z, r24
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	a2 83       	std	Z+2, r26	; 0x02
    2804:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2806:	fe 01       	movw	r30, r28
    2808:	eb 57       	subi	r30, 0x7B	; 123
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	44 f4       	brge	.+16     	; 0x2834 <LCD_voidInit+0x8c>
		__ticks = 1;
    2824:	fe 01       	movw	r30, r28
    2826:	ed 57       	subi	r30, 0x7D	; 125
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    2832:	64 c0       	rjmp	.+200    	; 0x28fc <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2834:	fe 01       	movw	r30, r28
    2836:	eb 57       	subi	r30, 0x7B	; 123
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	0c f0       	brlt	.+2      	; 0x2854 <LCD_voidInit+0xac>
    2852:	43 c0       	rjmp	.+134    	; 0x28da <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	fe 01       	movw	r30, r28
    2856:	e7 57       	subi	r30, 0x77	; 119
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8e 01       	movw	r16, r28
    2874:	0d 57       	subi	r16, 0x7D	; 125
    2876:	1f 4f       	sbci	r17, 0xFF	; 255
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	f8 01       	movw	r30, r16
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
    288a:	1f c0       	rjmp	.+62     	; 0x28ca <LCD_voidInit+0x122>
    288c:	fe 01       	movw	r30, r28
    288e:	ef 57       	subi	r30, 0x7F	; 127
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 e9       	ldi	r24, 0x90	; 144
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    289a:	fe 01       	movw	r30, r28
    289c:	ef 57       	subi	r30, 0x7F	; 127
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_voidInit+0xfc>
    28a8:	fe 01       	movw	r30, r28
    28aa:	ef 57       	subi	r30, 0x7F	; 127
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	de 01       	movw	r26, r28
    28b4:	ad 57       	subi	r26, 0x7D	; 125
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	ed 57       	subi	r30, 0x7D	; 125
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	9c 93       	st	X, r25
    28c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 57       	subi	r30, 0x7D	; 125
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	d1 f6       	brne	.-76     	; 0x288c <LCD_voidInit+0xe4>
    28d8:	27 c0       	rjmp	.+78     	; 0x2928 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	8e 01       	movw	r16, r28
    28dc:	0d 57       	subi	r16, 0x7D	; 125
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	fe 01       	movw	r30, r28
    28e2:	eb 57       	subi	r30, 0x7B	; 123
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	80 83       	st	Z, r24
    28fc:	de 01       	movw	r26, r28
    28fe:	a1 58       	subi	r26, 0x81	; 129
    2900:	bf 4f       	sbci	r27, 0xFF	; 255
    2902:	fe 01       	movw	r30, r28
    2904:	ed 57       	subi	r30, 0x7D	; 125
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	8d 93       	st	X+, r24
    290e:	9c 93       	st	X, r25
    2910:	fe 01       	movw	r30, r28
    2912:	e1 58       	subi	r30, 0x81	; 129
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_voidInit+0x172>
    291e:	fe 01       	movw	r30, r28
    2920:	e1 58       	subi	r30, 0x81	; 129
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2928:	80 e3       	ldi	r24, 0x30	; 48
    292a:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_voidSendInitCommand>
    292e:	fe 01       	movw	r30, r28
    2930:	e5 58       	subi	r30, 0x85	; 133
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 ea       	ldi	r26, 0xA0	; 160
    293a:	b0 e4       	ldi	r27, 0x40	; 64
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	8e 01       	movw	r16, r28
    2946:	09 58       	subi	r16, 0x89	; 137
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e5 58       	subi	r30, 0x85	; 133
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	55 e4       	ldi	r21, 0x45	; 69
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2972:	fe 01       	movw	r30, r28
    2974:	e9 58       	subi	r30, 0x89	; 137
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	44 f4       	brge	.+16     	; 0x29a0 <LCD_voidInit+0x1f8>
		__ticks = 1;
    2990:	fe 01       	movw	r30, r28
    2992:	eb 58       	subi	r30, 0x8B	; 139
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
    299e:	64 c0       	rjmp	.+200    	; 0x2a68 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    29a0:	fe 01       	movw	r30, r28
    29a2:	e9 58       	subi	r30, 0x89	; 137
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	57 e4       	ldi	r21, 0x47	; 71
    29b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ba:	18 16       	cp	r1, r24
    29bc:	0c f0       	brlt	.+2      	; 0x29c0 <LCD_voidInit+0x218>
    29be:	43 c0       	rjmp	.+134    	; 0x2a46 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	fe 01       	movw	r30, r28
    29c2:	e5 58       	subi	r30, 0x85	; 133
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	8e 01       	movw	r16, r28
    29e0:	0b 58       	subi	r16, 0x8B	; 139
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	f8 01       	movw	r30, r16
    29f2:	91 83       	std	Z+1, r25	; 0x01
    29f4:	80 83       	st	Z, r24
    29f6:	1f c0       	rjmp	.+62     	; 0x2a36 <LCD_voidInit+0x28e>
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 58       	subi	r30, 0x8D	; 141
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 e9       	ldi	r24, 0x90	; 144
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	fe 01       	movw	r30, r28
    2a08:	ed 58       	subi	r30, 0x8D	; 141
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_voidInit+0x268>
    2a14:	fe 01       	movw	r30, r28
    2a16:	ed 58       	subi	r30, 0x8D	; 141
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	de 01       	movw	r26, r28
    2a20:	ab 58       	subi	r26, 0x8B	; 139
    2a22:	bf 4f       	sbci	r27, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	eb 58       	subi	r30, 0x8B	; 139
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	91 81       	ldd	r25, Z+1	; 0x01
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	11 96       	adiw	r26, 0x01	; 1
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 58       	subi	r30, 0x8B	; 139
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	d1 f6       	brne	.-76     	; 0x29f8 <LCD_voidInit+0x250>
    2a44:	27 c0       	rjmp	.+78     	; 0x2a94 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	8e 01       	movw	r16, r28
    2a48:	0b 58       	subi	r16, 0x8B	; 139
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e9 58       	subi	r30, 0x89	; 137
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	f8 01       	movw	r30, r16
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
    2a68:	de 01       	movw	r26, r28
    2a6a:	af 58       	subi	r26, 0x8F	; 143
    2a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	eb 58       	subi	r30, 0x8B	; 139
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	8d 93       	st	X+, r24
    2a7a:	9c 93       	st	X, r25
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	ef 58       	subi	r30, 0x8F	; 143
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_voidInit+0x2de>
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ef 58       	subi	r30, 0x8F	; 143
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2a94:	80 e3       	ldi	r24, 0x30	; 48
    2a96:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_voidSendInitCommand>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e3 59       	subi	r30, 0x93	; 147
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e8       	ldi	r26, 0x80	; 128
    2aa6:	bf e3       	ldi	r27, 0x3F	; 63
    2aa8:	80 83       	st	Z, r24
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	a2 83       	std	Z+2, r26	; 0x02
    2aae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	07 59       	subi	r16, 0x97	; 151
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e3 59       	subi	r30, 0x93	; 147
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	55 e4       	ldi	r21, 0x45	; 69
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	80 83       	st	Z, r24
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	a2 83       	std	Z+2, r26	; 0x02
    2adc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e7 59       	subi	r30, 0x97	; 151
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	44 f4       	brge	.+16     	; 0x2b0c <LCD_voidInit+0x364>
		__ticks = 1;
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 59       	subi	r30, 0x99	; 153
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	64 c0       	rjmp	.+200    	; 0x2bd4 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 59       	subi	r30, 0x97	; 151
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	3f ef       	ldi	r19, 0xFF	; 255
    2b1e:	4f e7       	ldi	r20, 0x7F	; 127
    2b20:	57 e4       	ldi	r21, 0x47	; 71
    2b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b26:	18 16       	cp	r1, r24
    2b28:	0c f0       	brlt	.+2      	; 0x2b2c <LCD_voidInit+0x384>
    2b2a:	43 c0       	rjmp	.+134    	; 0x2bb2 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e3 59       	subi	r30, 0x93	; 147
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	09 59       	subi	r16, 0x99	; 153
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	1f c0       	rjmp	.+62     	; 0x2ba2 <LCD_voidInit+0x3fa>
    2b64:	fe 01       	movw	r30, r28
    2b66:	eb 59       	subi	r30, 0x9B	; 155
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 e9       	ldi	r24, 0x90	; 144
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	fe 01       	movw	r30, r28
    2b74:	eb 59       	subi	r30, 0x9B	; 155
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_voidInit+0x3d4>
    2b80:	fe 01       	movw	r30, r28
    2b82:	eb 59       	subi	r30, 0x9B	; 155
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	de 01       	movw	r26, r28
    2b8c:	a9 59       	subi	r26, 0x99	; 153
    2b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	e9 59       	subi	r30, 0x99	; 153
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	11 96       	adiw	r26, 0x01	; 1
    2b9e:	9c 93       	st	X, r25
    2ba0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 59       	subi	r30, 0x99	; 153
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	d1 f6       	brne	.-76     	; 0x2b64 <LCD_voidInit+0x3bc>
    2bb0:	27 c0       	rjmp	.+78     	; 0x2c00 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	8e 01       	movw	r16, r28
    2bb4:	09 59       	subi	r16, 0x99	; 153
    2bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e7 59       	subi	r30, 0x97	; 151
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	f8 01       	movw	r30, r16
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
    2bd4:	de 01       	movw	r26, r28
    2bd6:	ad 59       	subi	r26, 0x9D	; 157
    2bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e9 59       	subi	r30, 0x99	; 153
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	8d 93       	st	X+, r24
    2be6:	9c 93       	st	X, r25
    2be8:	fe 01       	movw	r30, r28
    2bea:	ed 59       	subi	r30, 0x9D	; 157
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_voidInit+0x44a>
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ed 59       	subi	r30, 0x9D	; 157
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2c00:	80 e3       	ldi	r24, 0x30	; 48
    2c02:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_voidSendInitCommand>
    2c06:	fe 01       	movw	r30, r28
    2c08:	e1 5a       	subi	r30, 0xA1	; 161
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 e8       	ldi	r26, 0x80	; 128
    2c12:	bf e3       	ldi	r27, 0x3F	; 63
    2c14:	80 83       	st	Z, r24
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	a2 83       	std	Z+2, r26	; 0x02
    2c1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	8e 01       	movw	r16, r28
    2c1e:	05 5a       	subi	r16, 0xA5	; 165
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e1 5a       	subi	r30, 0xA1	; 161
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	93 81       	ldd	r25, Z+3	; 0x03
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4a e7       	ldi	r20, 0x7A	; 122
    2c36:	55 e4       	ldi	r21, 0x45	; 69
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	f8 01       	movw	r30, r16
    2c42:	80 83       	st	Z, r24
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	a2 83       	std	Z+2, r26	; 0x02
    2c48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	e5 5a       	subi	r30, 0xA5	; 165
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	44 f4       	brge	.+16     	; 0x2c78 <LCD_voidInit+0x4d0>
		__ticks = 1;
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e7 5a       	subi	r30, 0xA7	; 167
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	64 c0       	rjmp	.+200    	; 0x2d40 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e5 5a       	subi	r30, 0xA5	; 165
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	0c f0       	brlt	.+2      	; 0x2c98 <LCD_voidInit+0x4f0>
    2c96:	43 c0       	rjmp	.+134    	; 0x2d1e <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e1 5a       	subi	r30, 0xA1	; 161
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	8e 01       	movw	r16, r28
    2cb8:	07 5a       	subi	r16, 0xA7	; 167
    2cba:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	1f c0       	rjmp	.+62     	; 0x2d0e <LCD_voidInit+0x566>
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e9 5a       	subi	r30, 0xA9	; 169
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 e9       	ldi	r24, 0x90	; 144
    2cd8:	91 e0       	ldi	r25, 0x01	; 1
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 5a       	subi	r30, 0xA9	; 169
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	91 81       	ldd	r25, Z+1	; 0x01
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_voidInit+0x540>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 5a       	subi	r30, 0xA9	; 169
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf6:	de 01       	movw	r26, r28
    2cf8:	a7 5a       	subi	r26, 0xA7	; 167
    2cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e7 5a       	subi	r30, 0xA7	; 167
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	9c 93       	st	X, r25
    2d0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5a       	subi	r30, 0xA7	; 167
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	d1 f6       	brne	.-76     	; 0x2cd0 <LCD_voidInit+0x528>
    2d1c:	27 c0       	rjmp	.+78     	; 0x2d6c <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	8e 01       	movw	r16, r28
    2d20:	07 5a       	subi	r16, 0xA7	; 167
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	e5 5a       	subi	r30, 0xA5	; 165
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
    2d40:	de 01       	movw	r26, r28
    2d42:	ab 5a       	subi	r26, 0xAB	; 171
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5a       	subi	r30, 0xA7	; 167
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	8d 93       	st	X+, r24
    2d52:	9c 93       	st	X, r25
    2d54:	fe 01       	movw	r30, r28
    2d56:	eb 5a       	subi	r30, 0xAB	; 171
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <LCD_voidInit+0x5b6>
    2d62:	fe 01       	movw	r30, r28
    2d64:	eb 5a       	subi	r30, 0xAB	; 171
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    2d6c:	80 e2       	ldi	r24, 0x20	; 32
    2d6e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <LCD_voidSendInitCommand>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 5a       	subi	r30, 0xAF	; 175
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a0 e8       	ldi	r26, 0x80	; 128
    2d7e:	bf e3       	ldi	r27, 0x3F	; 63
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	a2 83       	std	Z+2, r26	; 0x02
    2d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	8e 01       	movw	r16, r28
    2d8a:	03 5b       	subi	r16, 0xB3	; 179
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 5a       	subi	r30, 0xAF	; 175
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a e7       	ldi	r20, 0x7A	; 122
    2da2:	55 e4       	ldi	r21, 0x45	; 69
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 83       	st	Z, r24
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	a2 83       	std	Z+2, r26	; 0x02
    2db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db6:	fe 01       	movw	r30, r28
    2db8:	e3 5b       	subi	r30, 0xB3	; 179
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e8       	ldi	r20, 0x80	; 128
    2dca:	5f e3       	ldi	r21, 0x3F	; 63
    2dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd0:	88 23       	and	r24, r24
    2dd2:	44 f4       	brge	.+16     	; 0x2de4 <LCD_voidInit+0x63c>
		__ticks = 1;
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 5b       	subi	r30, 0xB5	; 181
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	80 83       	st	Z, r24
    2de2:	64 c0       	rjmp	.+200    	; 0x2eac <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    2de4:	fe 01       	movw	r30, r28
    2de6:	e3 5b       	subi	r30, 0xB3	; 179
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	3f ef       	ldi	r19, 0xFF	; 255
    2df6:	4f e7       	ldi	r20, 0x7F	; 127
    2df8:	57 e4       	ldi	r21, 0x47	; 71
    2dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfe:	18 16       	cp	r1, r24
    2e00:	0c f0       	brlt	.+2      	; 0x2e04 <LCD_voidInit+0x65c>
    2e02:	43 c0       	rjmp	.+134    	; 0x2e8a <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	fe 01       	movw	r30, r28
    2e06:	ef 5a       	subi	r30, 0xAF	; 175
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e2       	ldi	r20, 0x20	; 32
    2e18:	51 e4       	ldi	r21, 0x41	; 65
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	8e 01       	movw	r16, r28
    2e24:	05 5b       	subi	r16, 0xB5	; 181
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	80 83       	st	Z, r24
    2e3a:	1f c0       	rjmp	.+62     	; 0x2e7a <LCD_voidInit+0x6d2>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e7 5b       	subi	r30, 0xB7	; 183
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 e9       	ldi	r24, 0x90	; 144
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 5b       	subi	r30, 0xB7	; 183
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <LCD_voidInit+0x6ac>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5b       	subi	r30, 0xB7	; 183
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	de 01       	movw	r26, r28
    2e64:	a5 5b       	subi	r26, 0xB5	; 181
    2e66:	bf 4f       	sbci	r27, 0xFF	; 255
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e5 5b       	subi	r30, 0xB5	; 181
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	11 96       	adiw	r26, 0x01	; 1
    2e76:	9c 93       	st	X, r25
    2e78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e5 5b       	subi	r30, 0xB5	; 181
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 81       	ld	r24, Z
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	d1 f6       	brne	.-76     	; 0x2e3c <LCD_voidInit+0x694>
    2e88:	27 c0       	rjmp	.+78     	; 0x2ed8 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	8e 01       	movw	r16, r28
    2e8c:	05 5b       	subi	r16, 0xB5	; 181
    2e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	e3 5b       	subi	r30, 0xB3	; 179
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	de 01       	movw	r26, r28
    2eae:	a9 5b       	subi	r26, 0xB9	; 185
    2eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e5 5b       	subi	r30, 0xB5	; 181
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	8d 93       	st	X+, r24
    2ebe:	9c 93       	st	X, r25
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e9 5b       	subi	r30, 0xB9	; 185
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_voidInit+0x722>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 5b       	subi	r30, 0xB9	; 185
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    2ed8:	88 e2       	ldi	r24, 0x28	; 40
    2eda:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 5b       	subi	r30, 0xBD	; 189
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 e8       	ldi	r26, 0x80	; 128
    2eea:	bf e3       	ldi	r27, 0x3F	; 63
    2eec:	80 83       	st	Z, r24
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	a2 83       	std	Z+2, r26	; 0x02
    2ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	01 5c       	subi	r16, 0xC1	; 193
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	fe 01       	movw	r30, r28
    2efc:	ed 5b       	subi	r30, 0xBD	; 189
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	55 e4       	ldi	r21, 0x45	; 69
    2f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	f8 01       	movw	r30, r16
    2f1a:	80 83       	st	Z, r24
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	a2 83       	std	Z+2, r26	; 0x02
    2f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f22:	fe 01       	movw	r30, r28
    2f24:	ff 96       	adiw	r30, 0x3f	; 63
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5f e3       	ldi	r21, 0x3F	; 63
    2f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	2c f4       	brge	.+10     	; 0x2f48 <LCD_voidInit+0x7a0>
		__ticks = 1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9e af       	std	Y+62, r25	; 0x3e
    2f44:	8d af       	std	Y+61, r24	; 0x3d
    2f46:	46 c0       	rjmp	.+140    	; 0x2fd4 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    2f48:	fe 01       	movw	r30, r28
    2f4a:	ff 96       	adiw	r30, 0x3f	; 63
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	64 f5       	brge	.+88     	; 0x2fbc <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	fe 01       	movw	r30, r28
    2f66:	ed 5b       	subi	r30, 0xBD	; 189
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e af       	std	Y+62, r25	; 0x3e
    2f90:	8d af       	std	Y+61, r24	; 0x3d
    2f92:	0f c0       	rjmp	.+30     	; 0x2fb2 <LCD_voidInit+0x80a>
    2f94:	80 e9       	ldi	r24, 0x90	; 144
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	9c af       	std	Y+60, r25	; 0x3c
    2f9a:	8b af       	std	Y+59, r24	; 0x3b
    2f9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_voidInit+0x7f8>
    2fa4:	9c af       	std	Y+60, r25	; 0x3c
    2fa6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2faa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	9e af       	std	Y+62, r25	; 0x3e
    2fb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <LCD_voidInit+0x7ec>
    2fba:	16 c0       	rjmp	.+44     	; 0x2fe8 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	ff 96       	adiw	r30, 0x3f	; 63
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9e af       	std	Y+62, r25	; 0x3e
    2fd2:	8d af       	std	Y+61, r24	; 0x3d
    2fd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fd8:	9a af       	std	Y+58, r25	; 0x3a
    2fda:	89 af       	std	Y+57, r24	; 0x39
    2fdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2fde:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_voidInit+0x838>
    2fe4:	9a af       	std	Y+58, r25	; 0x3a
    2fe6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    2fe8:	88 e0       	ldi	r24, 0x08	; 8
    2fea:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	a0 e8       	ldi	r26, 0x80	; 128
    2ff4:	bf e3       	ldi	r27, 0x3F	; 63
    2ff6:	8d ab       	std	Y+53, r24	; 0x35
    2ff8:	9e ab       	std	Y+54, r25	; 0x36
    2ffa:	af ab       	std	Y+55, r26	; 0x37
    2ffc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    3000:	7e a9       	ldd	r23, Y+54	; 0x36
    3002:	8f a9       	ldd	r24, Y+55	; 0x37
    3004:	98 ad       	ldd	r25, Y+56	; 0x38
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4a e7       	ldi	r20, 0x7A	; 122
    300c:	55 e4       	ldi	r21, 0x45	; 69
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	89 ab       	std	Y+49, r24	; 0x31
    3018:	9a ab       	std	Y+50, r25	; 0x32
    301a:	ab ab       	std	Y+51, r26	; 0x33
    301c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    301e:	69 a9       	ldd	r22, Y+49	; 0x31
    3020:	7a a9       	ldd	r23, Y+50	; 0x32
    3022:	8b a9       	ldd	r24, Y+51	; 0x33
    3024:	9c a9       	ldd	r25, Y+52	; 0x34
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e8       	ldi	r20, 0x80	; 128
    302c:	5f e3       	ldi	r21, 0x3F	; 63
    302e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3032:	88 23       	and	r24, r24
    3034:	2c f4       	brge	.+10     	; 0x3040 <LCD_voidInit+0x898>
		__ticks = 1;
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	98 ab       	std	Y+48, r25	; 0x30
    303c:	8f a7       	std	Y+47, r24	; 0x2f
    303e:	3f c0       	rjmp	.+126    	; 0x30be <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3040:	69 a9       	ldd	r22, Y+49	; 0x31
    3042:	7a a9       	ldd	r23, Y+50	; 0x32
    3044:	8b a9       	ldd	r24, Y+51	; 0x33
    3046:	9c a9       	ldd	r25, Y+52	; 0x34
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	3f ef       	ldi	r19, 0xFF	; 255
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	57 e4       	ldi	r21, 0x47	; 71
    3050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	4c f5       	brge	.+82     	; 0x30aa <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3058:	6d a9       	ldd	r22, Y+53	; 0x35
    305a:	7e a9       	ldd	r23, Y+54	; 0x36
    305c:	8f a9       	ldd	r24, Y+55	; 0x37
    305e:	98 ad       	ldd	r25, Y+56	; 0x38
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e2       	ldi	r20, 0x20	; 32
    3066:	51 e4       	ldi	r21, 0x41	; 65
    3068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	98 ab       	std	Y+48, r25	; 0x30
    307e:	8f a7       	std	Y+47, r24	; 0x2f
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <LCD_voidInit+0x8f8>
    3082:	80 e9       	ldi	r24, 0x90	; 144
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	9e a7       	std	Y+46, r25	; 0x2e
    3088:	8d a7       	std	Y+45, r24	; 0x2d
    308a:	8d a5       	ldd	r24, Y+45	; 0x2d
    308c:	9e a5       	ldd	r25, Y+46	; 0x2e
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <LCD_voidInit+0x8e6>
    3092:	9e a7       	std	Y+46, r25	; 0x2e
    3094:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3096:	8f a5       	ldd	r24, Y+47	; 0x2f
    3098:	98 a9       	ldd	r25, Y+48	; 0x30
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	98 ab       	std	Y+48, r25	; 0x30
    309e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30a2:	98 a9       	ldd	r25, Y+48	; 0x30
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	69 f7       	brne	.-38     	; 0x3082 <LCD_voidInit+0x8da>
    30a8:	14 c0       	rjmp	.+40     	; 0x30d2 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30aa:	69 a9       	ldd	r22, Y+49	; 0x31
    30ac:	7a a9       	ldd	r23, Y+50	; 0x32
    30ae:	8b a9       	ldd	r24, Y+51	; 0x33
    30b0:	9c a9       	ldd	r25, Y+52	; 0x34
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	98 ab       	std	Y+48, r25	; 0x30
    30bc:	8f a7       	std	Y+47, r24	; 0x2f
    30be:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c0:	98 a9       	ldd	r25, Y+48	; 0x30
    30c2:	9c a7       	std	Y+44, r25	; 0x2c
    30c4:	8b a7       	std	Y+43, r24	; 0x2b
    30c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <LCD_voidInit+0x922>
    30ce:	9c a7       	std	Y+44, r25	; 0x2c
    30d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 ea       	ldi	r26, 0xA0	; 160
    30de:	b0 e4       	ldi	r27, 0x40	; 64
    30e0:	8f a3       	std	Y+39, r24	; 0x27
    30e2:	98 a7       	std	Y+40, r25	; 0x28
    30e4:	a9 a7       	std	Y+41, r26	; 0x29
    30e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ea:	78 a5       	ldd	r23, Y+40	; 0x28
    30ec:	89 a5       	ldd	r24, Y+41	; 0x29
    30ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a e7       	ldi	r20, 0x7A	; 122
    30f6:	55 e4       	ldi	r21, 0x45	; 69
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8b a3       	std	Y+35, r24	; 0x23
    3102:	9c a3       	std	Y+36, r25	; 0x24
    3104:	ad a3       	std	Y+37, r26	; 0x25
    3106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3108:	6b a1       	ldd	r22, Y+35	; 0x23
    310a:	7c a1       	ldd	r23, Y+36	; 0x24
    310c:	8d a1       	ldd	r24, Y+37	; 0x25
    310e:	9e a1       	ldd	r25, Y+38	; 0x26
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <LCD_voidInit+0x982>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9a a3       	std	Y+34, r25	; 0x22
    3126:	89 a3       	std	Y+33, r24	; 0x21
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    312a:	6b a1       	ldd	r22, Y+35	; 0x23
    312c:	7c a1       	ldd	r23, Y+36	; 0x24
    312e:	8d a1       	ldd	r24, Y+37	; 0x25
    3130:	9e a1       	ldd	r25, Y+38	; 0x26
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	6f a1       	ldd	r22, Y+39	; 0x27
    3144:	78 a5       	ldd	r23, Y+40	; 0x28
    3146:	89 a5       	ldd	r24, Y+41	; 0x29
    3148:	9a a5       	ldd	r25, Y+42	; 0x2a
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9a a3       	std	Y+34, r25	; 0x22
    3168:	89 a3       	std	Y+33, r24	; 0x21
    316a:	0f c0       	rjmp	.+30     	; 0x318a <LCD_voidInit+0x9e2>
    316c:	80 e9       	ldi	r24, 0x90	; 144
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	98 a3       	std	Y+32, r25	; 0x20
    3172:	8f 8f       	std	Y+31, r24	; 0x1f
    3174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3176:	98 a1       	ldd	r25, Y+32	; 0x20
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <LCD_voidInit+0x9d0>
    317c:	98 a3       	std	Y+32, r25	; 0x20
    317e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	89 a1       	ldd	r24, Y+33	; 0x21
    3182:	9a a1       	ldd	r25, Y+34	; 0x22
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	9a a3       	std	Y+34, r25	; 0x22
    3188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	89 a1       	ldd	r24, Y+33	; 0x21
    318c:	9a a1       	ldd	r25, Y+34	; 0x22
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <LCD_voidInit+0x9c4>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	6b a1       	ldd	r22, Y+35	; 0x23
    3196:	7c a1       	ldd	r23, Y+36	; 0x24
    3198:	8d a1       	ldd	r24, Y+37	; 0x25
    319a:	9e a1       	ldd	r25, Y+38	; 0x26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	89 a1       	ldd	r24, Y+33	; 0x21
    31aa:	9a a1       	ldd	r25, Y+34	; 0x22
    31ac:	9e 8f       	std	Y+30, r25	; 0x1e
    31ae:	8d 8f       	std	Y+29, r24	; 0x1d
    31b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <LCD_voidInit+0xa0c>
    31b8:	9e 8f       	std	Y+30, r25	; 0x1e
    31ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    31bc:	8c e0       	ldi	r24, 0x0C	; 12
    31be:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e8       	ldi	r26, 0x80	; 128
    31c8:	bf e3       	ldi	r27, 0x3F	; 63
    31ca:	89 8f       	std	Y+25, r24	; 0x19
    31cc:	9a 8f       	std	Y+26, r25	; 0x1a
    31ce:	ab 8f       	std	Y+27, r26	; 0x1b
    31d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a e7       	ldi	r20, 0x7A	; 122
    31e0:	55 e4       	ldi	r21, 0x45	; 69
    31e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8d 8b       	std	Y+21, r24	; 0x15
    31ec:	9e 8b       	std	Y+22, r25	; 0x16
    31ee:	af 8b       	std	Y+23, r26	; 0x17
    31f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f2:	6d 89       	ldd	r22, Y+21	; 0x15
    31f4:	7e 89       	ldd	r23, Y+22	; 0x16
    31f6:	8f 89       	ldd	r24, Y+23	; 0x17
    31f8:	98 8d       	ldd	r25, Y+24	; 0x18
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <LCD_voidInit+0xa6c>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	69 8d       	ldd	r22, Y+25	; 0x19
    322e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9c 8b       	std	Y+20, r25	; 0x14
    3252:	8b 8b       	std	Y+19, r24	; 0x13
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <LCD_voidInit+0xacc>
    3256:	80 e9       	ldi	r24, 0x90	; 144
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	9a 8b       	std	Y+18, r25	; 0x12
    325c:	89 8b       	std	Y+17, r24	; 0x11
    325e:	89 89       	ldd	r24, Y+17	; 0x11
    3260:	9a 89       	ldd	r25, Y+18	; 0x12
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <LCD_voidInit+0xaba>
    3266:	9a 8b       	std	Y+18, r25	; 0x12
    3268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	8b 89       	ldd	r24, Y+19	; 0x13
    3276:	9c 89       	ldd	r25, Y+20	; 0x14
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <LCD_voidInit+0xaae>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6d 89       	ldd	r22, Y+21	; 0x15
    3280:	7e 89       	ldd	r23, Y+22	; 0x16
    3282:	8f 89       	ldd	r24, Y+23	; 0x17
    3284:	98 8d       	ldd	r25, Y+24	; 0x18
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	9c 89       	ldd	r25, Y+20	; 0x14
    3296:	98 8b       	std	Y+16, r25	; 0x10
    3298:	8f 87       	std	Y+15, r24	; 0x0f
    329a:	8f 85       	ldd	r24, Y+15	; 0x0f
    329c:	98 89       	ldd	r25, Y+16	; 0x10
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <LCD_voidInit+0xaf6>
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    32a6:	86 e0       	ldi	r24, 0x06	; 6
    32a8:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e8       	ldi	r26, 0x80	; 128
    32b2:	bf e3       	ldi	r27, 0x3F	; 63
    32b4:	8b 87       	std	Y+11, r24	; 0x0b
    32b6:	9c 87       	std	Y+12, r25	; 0x0c
    32b8:	ad 87       	std	Y+13, r26	; 0x0d
    32ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32be:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a e7       	ldi	r20, 0x7A	; 122
    32ca:	55 e4       	ldi	r21, 0x45	; 69
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8f 83       	std	Y+7, r24	; 0x07
    32d6:	98 87       	std	Y+8, r25	; 0x08
    32d8:	a9 87       	std	Y+9, r26	; 0x09
    32da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32dc:	6f 81       	ldd	r22, Y+7	; 0x07
    32de:	78 85       	ldd	r23, Y+8	; 0x08
    32e0:	89 85       	ldd	r24, Y+9	; 0x09
    32e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e8       	ldi	r20, 0x80	; 128
    32ea:	5f e3       	ldi	r21, 0x3F	; 63
    32ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f0:	88 23       	and	r24, r24
    32f2:	2c f4       	brge	.+10     	; 0x32fe <LCD_voidInit+0xb56>
		__ticks = 1;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9e 83       	std	Y+6, r25	; 0x06
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	3f c0       	rjmp	.+126    	; 0x337c <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	3f ef       	ldi	r19, 0xFF	; 255
    330a:	4f e7       	ldi	r20, 0x7F	; 127
    330c:	57 e4       	ldi	r21, 0x47	; 71
    330e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3312:	18 16       	cp	r1, r24
    3314:	4c f5       	brge	.+82     	; 0x3368 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3316:	6b 85       	ldd	r22, Y+11	; 0x0b
    3318:	7c 85       	ldd	r23, Y+12	; 0x0c
    331a:	8d 85       	ldd	r24, Y+13	; 0x0d
    331c:	9e 85       	ldd	r25, Y+14	; 0x0e
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e2       	ldi	r20, 0x20	; 32
    3324:	51 e4       	ldi	r21, 0x41	; 65
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
    333e:	0f c0       	rjmp	.+30     	; 0x335e <LCD_voidInit+0xbb6>
    3340:	80 e9       	ldi	r24, 0x90	; 144
    3342:	91 e0       	ldi	r25, 0x01	; 1
    3344:	9c 83       	std	Y+4, r25	; 0x04
    3346:	8b 83       	std	Y+3, r24	; 0x03
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <LCD_voidInit+0xba4>
    3350:	9c 83       	std	Y+4, r25	; 0x04
    3352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3354:	8d 81       	ldd	r24, Y+5	; 0x05
    3356:	9e 81       	ldd	r25, Y+6	; 0x06
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	69 f7       	brne	.-38     	; 0x3340 <LCD_voidInit+0xb98>
    3366:	14 c0       	rjmp	.+40     	; 0x3390 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3368:	6f 81       	ldd	r22, Y+7	; 0x07
    336a:	78 85       	ldd	r23, Y+8	; 0x08
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9e 83       	std	Y+6, r25	; 0x06
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	8d 81       	ldd	r24, Y+5	; 0x05
    337e:	9e 81       	ldd	r25, Y+6	; 0x06
    3380:	9a 83       	std	Y+2, r25	; 0x02
    3382:	89 83       	std	Y+1, r24	; 0x01
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <LCD_voidInit+0xbe0>
    338c:	9a 83       	std	Y+2, r25	; 0x02
    338e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3390:	c4 57       	subi	r28, 0x74	; 116
    3392:	df 4f       	sbci	r29, 0xFF	; 255
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	2f 97       	sbiw	r28, 0x0f	; 15
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	63 e0       	ldi	r22, 0x03	; 3
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	62 e0       	ldi	r22, 0x02	; 2
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    33d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d4:	82 95       	swap	r24
    33d6:	8f 70       	andi	r24, 0x0F	; 15
    33d8:	98 2f       	mov	r25, r24
    33da:	91 70       	andi	r25, 0x01	; 1
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	49 2f       	mov	r20, r25
    33e2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	82 95       	swap	r24
    33ea:	86 95       	lsr	r24
    33ec:	87 70       	andi	r24, 0x07	; 7
    33ee:	98 2f       	mov	r25, r24
    33f0:	91 70       	andi	r25, 0x01	; 1
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	61 e0       	ldi	r22, 0x01	; 1
    33f6:	49 2f       	mov	r20, r25
    33f8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    33fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fe:	82 95       	swap	r24
    3400:	86 95       	lsr	r24
    3402:	86 95       	lsr	r24
    3404:	83 70       	andi	r24, 0x03	; 3
    3406:	98 2f       	mov	r25, r24
    3408:	91 70       	andi	r25, 0x01	; 1
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	62 e0       	ldi	r22, 0x02	; 2
    340e:	49 2f       	mov	r20, r25
    3410:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    3414:	8f 85       	ldd	r24, Y+15	; 0x0f
    3416:	98 2f       	mov	r25, r24
    3418:	99 1f       	adc	r25, r25
    341a:	99 27       	eor	r25, r25
    341c:	99 1f       	adc	r25, r25
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	64 e0       	ldi	r22, 0x04	; 4
    3422:	49 2f       	mov	r20, r25
    3424:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	62 e0       	ldi	r22, 0x02	; 2
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	62 e0       	ldi	r22, 0x02	; 2
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    343c:	8f 85       	ldd	r24, Y+15	; 0x0f
    343e:	98 2f       	mov	r25, r24
    3440:	91 70       	andi	r25, 0x01	; 1
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	49 2f       	mov	r20, r25
    3448:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    344c:	8f 85       	ldd	r24, Y+15	; 0x0f
    344e:	86 95       	lsr	r24
    3450:	98 2f       	mov	r25, r24
    3452:	91 70       	andi	r25, 0x01	; 1
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	61 e0       	ldi	r22, 0x01	; 1
    3458:	49 2f       	mov	r20, r25
    345a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    345e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3460:	86 95       	lsr	r24
    3462:	86 95       	lsr	r24
    3464:	98 2f       	mov	r25, r24
    3466:	91 70       	andi	r25, 0x01	; 1
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	62 e0       	ldi	r22, 0x02	; 2
    346c:	49 2f       	mov	r20, r25
    346e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	86 95       	lsr	r24
    3476:	86 95       	lsr	r24
    3478:	86 95       	lsr	r24
    347a:	98 2f       	mov	r25, r24
    347c:	91 70       	andi	r25, 0x01	; 1
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	64 e0       	ldi	r22, 0x04	; 4
    3482:	49 2f       	mov	r20, r25
    3484:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 ea       	ldi	r26, 0xA0	; 160
    3498:	b0 e4       	ldi	r27, 0x40	; 64
    349a:	8b 87       	std	Y+11, r24	; 0x0b
    349c:	9c 87       	std	Y+12, r25	; 0x0c
    349e:	ad 87       	std	Y+13, r26	; 0x0d
    34a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	4a e7       	ldi	r20, 0x7A	; 122
    34b0:	55 e4       	ldi	r21, 0x45	; 69
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	8f 83       	std	Y+7, r24	; 0x07
    34bc:	98 87       	std	Y+8, r25	; 0x08
    34be:	a9 87       	std	Y+9, r26	; 0x09
    34c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c2:	6f 81       	ldd	r22, Y+7	; 0x07
    34c4:	78 85       	ldd	r23, Y+8	; 0x08
    34c6:	89 85       	ldd	r24, Y+9	; 0x09
    34c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e8       	ldi	r20, 0x80	; 128
    34d0:	5f e3       	ldi	r21, 0x3F	; 63
    34d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d6:	88 23       	and	r24, r24
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	9e 83       	std	Y+6, r25	; 0x06
    34e0:	8d 83       	std	Y+5, r24	; 0x05
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    34e4:	6f 81       	ldd	r22, Y+7	; 0x07
    34e6:	78 85       	ldd	r23, Y+8	; 0x08
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	3f ef       	ldi	r19, 0xFF	; 255
    34f0:	4f e7       	ldi	r20, 0x7F	; 127
    34f2:	57 e4       	ldi	r21, 0x47	; 71
    34f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f8:	18 16       	cp	r1, r24
    34fa:	4c f5       	brge	.+82     	; 0x354e <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3500:	8d 85       	ldd	r24, Y+13	; 0x0d
    3502:	9e 85       	ldd	r25, Y+14	; 0x0e
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e2       	ldi	r20, 0x20	; 32
    350a:	51 e4       	ldi	r21, 0x41	; 65
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9e 83       	std	Y+6, r25	; 0x06
    3522:	8d 83       	std	Y+5, r24	; 0x05
    3524:	0f c0       	rjmp	.+30     	; 0x3544 <LCD_voidSendCommand+0x19c>
    3526:	80 e9       	ldi	r24, 0x90	; 144
    3528:	91 e0       	ldi	r25, 0x01	; 1
    352a:	9c 83       	std	Y+4, r25	; 0x04
    352c:	8b 83       	std	Y+3, r24	; 0x03
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <LCD_voidSendCommand+0x18a>
    3536:	9c 83       	std	Y+4, r25	; 0x04
    3538:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	9e 81       	ldd	r25, Y+6	; 0x06
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	69 f7       	brne	.-38     	; 0x3526 <LCD_voidSendCommand+0x17e>
    354c:	14 c0       	rjmp	.+40     	; 0x3576 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354e:	6f 81       	ldd	r22, Y+7	; 0x07
    3550:	78 85       	ldd	r23, Y+8	; 0x08
    3552:	89 85       	ldd	r24, Y+9	; 0x09
    3554:	9a 85       	ldd	r25, Y+10	; 0x0a
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9e 83       	std	Y+6, r25	; 0x06
    3560:	8d 83       	std	Y+5, r24	; 0x05
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	f1 f7       	brne	.-4      	; 0x356e <LCD_voidSendCommand+0x1c6>
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3576:	2f 96       	adiw	r28, 0x0f	; 15
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	2f 97       	sbiw	r28, 0x0f	; 15
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	63 e0       	ldi	r22, 0x03	; 3
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	62 e0       	ldi	r22, 0x02	; 2
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    35b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b4:	82 95       	swap	r24
    35b6:	8f 70       	andi	r24, 0x0F	; 15
    35b8:	98 2f       	mov	r25, r24
    35ba:	91 70       	andi	r25, 0x01	; 1
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	49 2f       	mov	r20, r25
    35c2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    35c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c8:	82 95       	swap	r24
    35ca:	86 95       	lsr	r24
    35cc:	87 70       	andi	r24, 0x07	; 7
    35ce:	98 2f       	mov	r25, r24
    35d0:	91 70       	andi	r25, 0x01	; 1
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	49 2f       	mov	r20, r25
    35d8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    35dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    35de:	82 95       	swap	r24
    35e0:	86 95       	lsr	r24
    35e2:	86 95       	lsr	r24
    35e4:	83 70       	andi	r24, 0x03	; 3
    35e6:	98 2f       	mov	r25, r24
    35e8:	91 70       	andi	r25, 0x01	; 1
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	62 e0       	ldi	r22, 0x02	; 2
    35ee:	49 2f       	mov	r20, r25
    35f0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    35f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f6:	98 2f       	mov	r25, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	99 27       	eor	r25, r25
    35fc:	99 1f       	adc	r25, r25
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	64 e0       	ldi	r22, 0x04	; 4
    3602:	49 2f       	mov	r20, r25
    3604:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	62 e0       	ldi	r22, 0x02	; 2
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	a0 ea       	ldi	r26, 0xA0	; 160
    3618:	b0 e4       	ldi	r27, 0x40	; 64
    361a:	8b 87       	std	Y+11, r24	; 0x0b
    361c:	9c 87       	std	Y+12, r25	; 0x0c
    361e:	ad 87       	std	Y+13, r26	; 0x0d
    3620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3622:	6b 85       	ldd	r22, Y+11	; 0x0b
    3624:	7c 85       	ldd	r23, Y+12	; 0x0c
    3626:	8d 85       	ldd	r24, Y+13	; 0x0d
    3628:	9e 85       	ldd	r25, Y+14	; 0x0e
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4a e7       	ldi	r20, 0x7A	; 122
    3630:	55 e4       	ldi	r21, 0x45	; 69
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	8f 83       	std	Y+7, r24	; 0x07
    363c:	98 87       	std	Y+8, r25	; 0x08
    363e:	a9 87       	std	Y+9, r26	; 0x09
    3640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	2c f4       	brge	.+10     	; 0x3664 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
    3662:	3f c0       	rjmp	.+126    	; 0x36e2 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3664:	6f 81       	ldd	r22, Y+7	; 0x07
    3666:	78 85       	ldd	r23, Y+8	; 0x08
    3668:	89 85       	ldd	r24, Y+9	; 0x09
    366a:	9a 85       	ldd	r25, Y+10	; 0x0a
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	3f ef       	ldi	r19, 0xFF	; 255
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	57 e4       	ldi	r21, 0x47	; 71
    3674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	4c f5       	brge	.+82     	; 0x36ce <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367c:	6b 85       	ldd	r22, Y+11	; 0x0b
    367e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3680:	8d 85       	ldd	r24, Y+13	; 0x0d
    3682:	9e 85       	ldd	r25, Y+14	; 0x0e
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e2       	ldi	r20, 0x20	; 32
    368a:	51 e4       	ldi	r21, 0x41	; 65
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	0f c0       	rjmp	.+30     	; 0x36c4 <LCD_voidSendInitCommand+0x13c>
    36a6:	80 e9       	ldi	r24, 0x90	; 144
    36a8:	91 e0       	ldi	r25, 0x01	; 1
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <LCD_voidSendInitCommand+0x12a>
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	9e 83       	std	Y+6, r25	; 0x06
    36c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <LCD_voidSendInitCommand+0x11e>
    36cc:	14 c0       	rjmp	.+40     	; 0x36f6 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	6f 81       	ldd	r22, Y+7	; 0x07
    36d0:	78 85       	ldd	r23, Y+8	; 0x08
    36d2:	89 85       	ldd	r24, Y+9	; 0x09
    36d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <LCD_voidSendInitCommand+0x166>
    36f2:	9a 83       	std	Y+2, r25	; 0x02
    36f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    36f6:	2f 96       	adiw	r28, 0x0f	; 15
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	2f 97       	sbiw	r28, 0x0f	; 15
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	63 e0       	ldi	r22, 0x03	; 3
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	62 e0       	ldi	r22, 0x02	; 2
    372c:	41 e0       	ldi	r20, 0x01	; 1
    372e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    3732:	8f 85       	ldd	r24, Y+15	; 0x0f
    3734:	82 95       	swap	r24
    3736:	8f 70       	andi	r24, 0x0F	; 15
    3738:	98 2f       	mov	r25, r24
    373a:	91 70       	andi	r25, 0x01	; 1
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	49 2f       	mov	r20, r25
    3742:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    3746:	8f 85       	ldd	r24, Y+15	; 0x0f
    3748:	82 95       	swap	r24
    374a:	86 95       	lsr	r24
    374c:	87 70       	andi	r24, 0x07	; 7
    374e:	98 2f       	mov	r25, r24
    3750:	91 70       	andi	r25, 0x01	; 1
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	49 2f       	mov	r20, r25
    3758:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    375c:	8f 85       	ldd	r24, Y+15	; 0x0f
    375e:	82 95       	swap	r24
    3760:	86 95       	lsr	r24
    3762:	86 95       	lsr	r24
    3764:	83 70       	andi	r24, 0x03	; 3
    3766:	98 2f       	mov	r25, r24
    3768:	91 70       	andi	r25, 0x01	; 1
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	49 2f       	mov	r20, r25
    3770:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    3774:	8f 85       	ldd	r24, Y+15	; 0x0f
    3776:	98 2f       	mov	r25, r24
    3778:	99 1f       	adc	r25, r25
    377a:	99 27       	eor	r25, r25
    377c:	99 1f       	adc	r25, r25
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	64 e0       	ldi	r22, 0x04	; 4
    3782:	49 2f       	mov	r20, r25
    3784:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	62 e0       	ldi	r22, 0x02	; 2
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	62 e0       	ldi	r22, 0x02	; 2
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    379c:	8f 85       	ldd	r24, Y+15	; 0x0f
    379e:	98 2f       	mov	r25, r24
    37a0:	91 70       	andi	r25, 0x01	; 1
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	49 2f       	mov	r20, r25
    37a8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    37ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ae:	86 95       	lsr	r24
    37b0:	98 2f       	mov	r25, r24
    37b2:	91 70       	andi	r25, 0x01	; 1
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	61 e0       	ldi	r22, 0x01	; 1
    37b8:	49 2f       	mov	r20, r25
    37ba:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    37be:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c0:	86 95       	lsr	r24
    37c2:	86 95       	lsr	r24
    37c4:	98 2f       	mov	r25, r24
    37c6:	91 70       	andi	r25, 0x01	; 1
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	49 2f       	mov	r20, r25
    37ce:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    37d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d4:	86 95       	lsr	r24
    37d6:	86 95       	lsr	r24
    37d8:	86 95       	lsr	r24
    37da:	98 2f       	mov	r25, r24
    37dc:	91 70       	andi	r25, 0x01	; 1
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	64 e0       	ldi	r22, 0x04	; 4
    37e2:	49 2f       	mov	r20, r25
    37e4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	62 e0       	ldi	r22, 0x02	; 2
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	a0 ea       	ldi	r26, 0xA0	; 160
    37f8:	b0 e4       	ldi	r27, 0x40	; 64
    37fa:	8b 87       	std	Y+11, r24	; 0x0b
    37fc:	9c 87       	std	Y+12, r25	; 0x0c
    37fe:	ad 87       	std	Y+13, r26	; 0x0d
    3800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3802:	6b 85       	ldd	r22, Y+11	; 0x0b
    3804:	7c 85       	ldd	r23, Y+12	; 0x0c
    3806:	8d 85       	ldd	r24, Y+13	; 0x0d
    3808:	9e 85       	ldd	r25, Y+14	; 0x0e
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	4a e7       	ldi	r20, 0x7A	; 122
    3810:	55 e4       	ldi	r21, 0x45	; 69
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	8f 83       	std	Y+7, r24	; 0x07
    381c:	98 87       	std	Y+8, r25	; 0x08
    381e:	a9 87       	std	Y+9, r26	; 0x09
    3820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3822:	6f 81       	ldd	r22, Y+7	; 0x07
    3824:	78 85       	ldd	r23, Y+8	; 0x08
    3826:	89 85       	ldd	r24, Y+9	; 0x09
    3828:	9a 85       	ldd	r25, Y+10	; 0x0a
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e8       	ldi	r20, 0x80	; 128
    3830:	5f e3       	ldi	r21, 0x3F	; 63
    3832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3836:	88 23       	and	r24, r24
    3838:	2c f4       	brge	.+10     	; 0x3844 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
    3842:	3f c0       	rjmp	.+126    	; 0x38c2 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3844:	6f 81       	ldd	r22, Y+7	; 0x07
    3846:	78 85       	ldd	r23, Y+8	; 0x08
    3848:	89 85       	ldd	r24, Y+9	; 0x09
    384a:	9a 85       	ldd	r25, Y+10	; 0x0a
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	4c f5       	brge	.+82     	; 0x38ae <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385c:	6b 85       	ldd	r22, Y+11	; 0x0b
    385e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3860:	8d 85       	ldd	r24, Y+13	; 0x0d
    3862:	9e 85       	ldd	r25, Y+14	; 0x0e
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e2       	ldi	r20, 0x20	; 32
    386a:	51 e4       	ldi	r21, 0x41	; 65
    386c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	9e 83       	std	Y+6, r25	; 0x06
    3882:	8d 83       	std	Y+5, r24	; 0x05
    3884:	0f c0       	rjmp	.+30     	; 0x38a4 <LCD_voidWriteChar+0x19c>
    3886:	80 e9       	ldi	r24, 0x90	; 144
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	9c 83       	std	Y+4, r25	; 0x04
    388c:	8b 83       	std	Y+3, r24	; 0x03
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	9c 81       	ldd	r25, Y+4	; 0x04
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <LCD_voidWriteChar+0x18a>
    3896:	9c 83       	std	Y+4, r25	; 0x04
    3898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389a:	8d 81       	ldd	r24, Y+5	; 0x05
    389c:	9e 81       	ldd	r25, Y+6	; 0x06
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	9e 81       	ldd	r25, Y+6	; 0x06
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	69 f7       	brne	.-38     	; 0x3886 <LCD_voidWriteChar+0x17e>
    38ac:	14 c0       	rjmp	.+40     	; 0x38d6 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ae:	6f 81       	ldd	r22, Y+7	; 0x07
    38b0:	78 85       	ldd	r23, Y+8	; 0x08
    38b2:	89 85       	ldd	r24, Y+9	; 0x09
    38b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	9e 83       	std	Y+6, r25	; 0x06
    38c0:	8d 83       	std	Y+5, r24	; 0x05
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <LCD_voidWriteChar+0x1c6>
    38d2:	9a 83       	std	Y+2, r25	; 0x02
    38d4:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    38d6:	2f 96       	adiw	r28, 0x0f	; 15
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <LCD_voidWriteString+0x6>
    38ee:	0f 92       	push	r0
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	9b 83       	std	Y+3, r25	; 0x03
    38f6:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    38f8:	19 82       	std	Y+1, r1	; 0x01
    38fa:	0e c0       	rjmp	.+28     	; 0x3918 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	9b 81       	ldd	r25, Y+3	; 0x03
    3906:	fc 01       	movw	r30, r24
    3908:	e2 0f       	add	r30, r18
    390a:	f3 1f       	adc	r31, r19
    390c:	80 81       	ld	r24, Z
    390e:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		index++;
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	8f 5f       	subi	r24, 0xFF	; 255
    3916:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	9b 81       	ldd	r25, Y+3	; 0x03
    3922:	fc 01       	movw	r30, r24
    3924:	e2 0f       	add	r30, r18
    3926:	f3 1f       	adc	r31, r19
    3928:	80 81       	ld	r24, Z
    392a:	88 23       	and	r24, r24
    392c:	39 f7       	brne	.-50     	; 0x38fc <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	2e 97       	sbiw	r28, 0x0e	; 14
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	69 87       	std	Y+9, r22	; 0x09
    3954:	7a 87       	std	Y+10, r23	; 0x0a
    3956:	8b 87       	std	Y+11, r24	; 0x0b
    3958:	9c 87       	std	Y+12, r25	; 0x0c
    395a:	5e 87       	std	Y+14, r21	; 0x0e
    395c:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    395e:	1d 82       	std	Y+5, r1	; 0x05
    3960:	1e 82       	std	Y+6, r1	; 0x06
    3962:	1f 82       	std	Y+7, r1	; 0x07
    3964:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3966:	83 e1       	ldi	r24, 0x13	; 19
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	89 83       	std	Y+1, r24	; 0x01
    3970:	9a 83       	std	Y+2, r25	; 0x02
    3972:	ab 83       	std	Y+3, r26	; 0x03
    3974:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3976:	29 81       	ldd	r18, Y+1	; 0x01
    3978:	3a 81       	ldd	r19, Y+2	; 0x02
    397a:	8d 85       	ldd	r24, Y+13	; 0x0d
    397c:	9e 85       	ldd	r25, Y+14	; 0x0e
    397e:	fc 01       	movw	r30, r24
    3980:	e2 0f       	add	r30, r18
    3982:	f3 1f       	adc	r31, r19
    3984:	10 82       	st	Z, r1
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	ab 81       	ldd	r26, Y+3	; 0x03
    398c:	bc 81       	ldd	r27, Y+4	; 0x04
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	a1 09       	sbc	r26, r1
    3992:	b1 09       	sbc	r27, r1
    3994:	89 83       	std	Y+1, r24	; 0x01
    3996:	9a 83       	std	Y+2, r25	; 0x02
    3998:	ab 83       	std	Y+3, r26	; 0x03
    399a:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    399c:	89 85       	ldd	r24, Y+9	; 0x09
    399e:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    39a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    39a4:	bb 23       	and	r27, r27
    39a6:	0c f0       	brlt	.+2      	; 0x39aa <IntToString+0x70>
    39a8:	4d c0       	rjmp	.+154    	; 0x3a44 <IntToString+0x10a>
		flag = 1;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	a0 e0       	ldi	r26, 0x00	; 0
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	8d 83       	std	Y+5, r24	; 0x05
    39b4:	9e 83       	std	Y+6, r25	; 0x06
    39b6:	af 83       	std	Y+7, r26	; 0x07
    39b8:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    39ba:	89 85       	ldd	r24, Y+9	; 0x09
    39bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39be:	ab 85       	ldd	r26, Y+11	; 0x0b
    39c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    39c2:	b0 95       	com	r27
    39c4:	a0 95       	com	r26
    39c6:	90 95       	com	r25
    39c8:	81 95       	neg	r24
    39ca:	9f 4f       	sbci	r25, 0xFF	; 255
    39cc:	af 4f       	sbci	r26, 0xFF	; 255
    39ce:	bf 4f       	sbci	r27, 0xFF	; 255
    39d0:	89 87       	std	Y+9, r24	; 0x09
    39d2:	9a 87       	std	Y+10, r25	; 0x0a
    39d4:	ab 87       	std	Y+11, r26	; 0x0b
    39d6:	bc 87       	std	Y+12, r27	; 0x0c
    39d8:	35 c0       	rjmp	.+106    	; 0x3a44 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    39da:	29 81       	ldd	r18, Y+1	; 0x01
    39dc:	3a 81       	ldd	r19, Y+2	; 0x02
    39de:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e2:	8c 01       	movw	r16, r24
    39e4:	02 0f       	add	r16, r18
    39e6:	13 1f       	adc	r17, r19
    39e8:	89 85       	ldd	r24, Y+9	; 0x09
    39ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    39ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    39f0:	2a e0       	ldi	r18, 0x0A	; 10
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	0e 94 de 20 	call	0x41bc	; 0x41bc <__divmodsi4>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	80 5d       	subi	r24, 0xD0	; 208
    3a06:	f8 01       	movw	r30, r16
    3a08:	80 83       	st	Z, r24
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a10:	bc 81       	ldd	r27, Y+4	; 0x04
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	a1 09       	sbc	r26, r1
    3a16:	b1 09       	sbc	r27, r1
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	9a 83       	std	Y+2, r25	; 0x02
    3a1c:	ab 83       	std	Y+3, r26	; 0x03
    3a1e:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a26:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a28:	2a e0       	ldi	r18, 0x0A	; 10
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 de 20 	call	0x41bc	; 0x41bc <__divmodsi4>
    3a38:	da 01       	movw	r26, r20
    3a3a:	c9 01       	movw	r24, r18
    3a3c:	89 87       	std	Y+9, r24	; 0x09
    3a3e:	9a 87       	std	Y+10, r25	; 0x0a
    3a40:	ab 87       	std	Y+11, r26	; 0x0b
    3a42:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a4a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	a1 05       	cpc	r26, r1
    3a50:	b1 05       	cpc	r27, r1
    3a52:	19 f6       	brne	.-122    	; 0x39da <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3a54:	8d 81       	ldd	r24, Y+5	; 0x05
    3a56:	9e 81       	ldd	r25, Y+6	; 0x06
    3a58:	af 81       	ldd	r26, Y+7	; 0x07
    3a5a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	a1 05       	cpc	r26, r1
    3a60:	b1 05       	cpc	r27, r1
    3a62:	a1 f0       	breq	.+40     	; 0x3a8c <IntToString+0x152>
		str[i--] = '-';
    3a64:	29 81       	ldd	r18, Y+1	; 0x01
    3a66:	3a 81       	ldd	r19, Y+2	; 0x02
    3a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	e2 0f       	add	r30, r18
    3a70:	f3 1f       	adc	r31, r19
    3a72:	8d e2       	ldi	r24, 0x2D	; 45
    3a74:	80 83       	st	Z, r24
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	a1 09       	sbc	r26, r1
    3a82:	b1 09       	sbc	r27, r1
    3a84:	89 83       	std	Y+1, r24	; 0x01
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	ab 83       	std	Y+3, r26	; 0x03
    3a8a:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	ab 81       	ldd	r26, Y+3	; 0x03
    3a92:	bc 81       	ldd	r27, Y+4	; 0x04
    3a94:	01 96       	adiw	r24, 0x01	; 1
    3a96:	a1 1d       	adc	r26, r1
    3a98:	b1 1d       	adc	r27, r1
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	ab 83       	std	Y+3, r26	; 0x03
    3aa0:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3aa2:	29 81       	ldd	r18, Y+1	; 0x01
    3aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aaa:	82 0f       	add	r24, r18
    3aac:	93 1f       	adc	r25, r19

}
    3aae:	2e 96       	adiw	r28, 0x0e	; 14
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	1f 91       	pop	r17
    3ac0:	0f 91       	pop	r16
    3ac2:	08 95       	ret

00003ac4 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	6a 97       	sbiw	r28, 0x1a	; 26
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	6f 8b       	std	Y+23, r22	; 0x17
    3ada:	78 8f       	std	Y+24, r23	; 0x18
    3adc:	89 8f       	std	Y+25, r24	; 0x19
    3ade:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae4:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ae6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	a1 05       	cpc	r26, r1
    3aec:	b1 05       	cpc	r27, r1
    3aee:	99 f0       	breq	.+38     	; 0x3b16 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3af0:	8f 89       	ldd	r24, Y+23	; 0x17
    3af2:	98 8d       	ldd	r25, Y+24	; 0x18
    3af4:	a9 8d       	ldd	r26, Y+25	; 0x19
    3af6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3af8:	9e 01       	movw	r18, r28
    3afa:	2d 5f       	subi	r18, 0xFD	; 253
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	bc 01       	movw	r22, r24
    3b00:	cd 01       	movw	r24, r26
    3b02:	a9 01       	movw	r20, r18
    3b04:	0e 94 9d 1c 	call	0x393a	; 0x393a <IntToString>
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <LCD_voidWriteString>
    3b14:	03 c0       	rjmp	.+6      	; 0x3b1c <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    3b16:	80 e3       	ldi	r24, 0x30	; 48
    3b18:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
	}
}
    3b1c:	6a 96       	adiw	r28, 0x1a	; 26
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	08 95       	ret

00003b2e <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3b2e:	df 93       	push	r29
    3b30:	cf 93       	push	r28
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	a6 97       	sbiw	r28, 0x26	; 38
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	f8 94       	cli
    3b3c:	de bf       	out	0x3e, r29	; 62
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	6b a3       	std	Y+35, r22	; 0x23
    3b44:	7c a3       	std	Y+36, r23	; 0x24
    3b46:	8d a3       	std	Y+37, r24	; 0x25
    3b48:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    3b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b50:	9e a1       	ldd	r25, Y+38	; 0x26
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	48 ec       	ldi	r20, 0xC8	; 200
    3b58:	52 e4       	ldi	r21, 0x42	; 66
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	bc 01       	movw	r22, r24
    3b64:	cd 01       	movw	r24, r26
    3b66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8b 87       	std	Y+11, r24	; 0x0b
    3b70:	9c 87       	std	Y+12, r25	; 0x0c
    3b72:	ad 87       	std	Y+13, r26	; 0x0d
    3b74:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    3b76:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b78:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b7a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b7c:	be 85       	ldd	r27, Y+14	; 0x0e
    3b7e:	9e 01       	movw	r18, r28
    3b80:	21 5f       	subi	r18, 0xF1	; 241
    3b82:	3f 4f       	sbci	r19, 0xFF	; 255
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	a9 01       	movw	r20, r18
    3b8a:	0e 94 9d 1c 	call	0x393a	; 0x393a <IntToString>
    3b8e:	9a 87       	std	Y+10, r25	; 0x0a
    3b90:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    3b92:	1d 82       	std	Y+5, r1	; 0x05
    3b94:	1e 82       	std	Y+6, r1	; 0x06
    3b96:	1f 82       	std	Y+7, r1	; 0x07
    3b98:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    3b9a:	19 82       	std	Y+1, r1	; 0x01
    3b9c:	1a 82       	std	Y+2, r1	; 0x02
    3b9e:	1b 82       	std	Y+3, r1	; 0x03
    3ba0:	1c 82       	std	Y+4, r1	; 0x04
    3ba2:	0b c0       	rjmp	.+22     	; 0x3bba <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	af 81       	ldd	r26, Y+7	; 0x07
    3baa:	b8 85       	ldd	r27, Y+8	; 0x08
    3bac:	01 96       	adiw	r24, 0x01	; 1
    3bae:	a1 1d       	adc	r26, r1
    3bb0:	b1 1d       	adc	r27, r1
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	af 83       	std	Y+7, r26	; 0x07
    3bb8:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    3bba:	2d 81       	ldd	r18, Y+5	; 0x05
    3bbc:	3e 81       	ldd	r19, Y+6	; 0x06
    3bbe:	89 85       	ldd	r24, Y+9	; 0x09
    3bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	e2 0f       	add	r30, r18
    3bc6:	f3 1f       	adc	r31, r19
    3bc8:	80 81       	ld	r24, Z
    3bca:	88 23       	and	r24, r24
    3bcc:	59 f7       	brne	.-42     	; 0x3ba4 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	af 81       	ldd	r26, Y+7	; 0x07
    3bd4:	b8 85       	ldd	r27, Y+8	; 0x08
    3bd6:	02 97       	sbiw	r24, 0x02	; 2
    3bd8:	a1 09       	sbc	r26, r1
    3bda:	b1 09       	sbc	r27, r1
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	af 83       	std	Y+7, r26	; 0x07
    3be2:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	af 81       	ldd	r26, Y+7	; 0x07
    3bea:	b8 85       	ldd	r27, Y+8	; 0x08
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	a1 05       	cpc	r26, r1
    3bf0:	b1 05       	cpc	r27, r1
    3bf2:	49 f5       	brne	.+82     	; 0x3c46 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3bf4:	80 e3       	ldi	r24, 0x30	; 48
    3bf6:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
    3bfa:	25 c0       	rjmp	.+74     	; 0x3c46 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3bfc:	29 81       	ldd	r18, Y+1	; 0x01
    3bfe:	3a 81       	ldd	r19, Y+2	; 0x02
    3c00:	4b 81       	ldd	r20, Y+3	; 0x03
    3c02:	5c 81       	ldd	r21, Y+4	; 0x04
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	af 81       	ldd	r26, Y+7	; 0x07
    3c0a:	b8 85       	ldd	r27, Y+8	; 0x08
    3c0c:	28 17       	cp	r18, r24
    3c0e:	39 07       	cpc	r19, r25
    3c10:	4a 07       	cpc	r20, r26
    3c12:	5b 07       	cpc	r21, r27
    3c14:	19 f4       	brne	.+6      	; 0x3c1c <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    3c16:	8e e2       	ldi	r24, 0x2E	; 46
    3c18:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3c1c:	29 81       	ldd	r18, Y+1	; 0x01
    3c1e:	3a 81       	ldd	r19, Y+2	; 0x02
    3c20:	89 85       	ldd	r24, Y+9	; 0x09
    3c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c24:	fc 01       	movw	r30, r24
    3c26:	e2 0f       	add	r30, r18
    3c28:	f3 1f       	adc	r31, r19
    3c2a:	80 81       	ld	r24, Z
    3c2c:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		counter2++;
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	ab 81       	ldd	r26, Y+3	; 0x03
    3c36:	bc 81       	ldd	r27, Y+4	; 0x04
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	a1 1d       	adc	r26, r1
    3c3c:	b1 1d       	adc	r27, r1
    3c3e:	89 83       	std	Y+1, r24	; 0x01
    3c40:	9a 83       	std	Y+2, r25	; 0x02
    3c42:	ab 83       	std	Y+3, r26	; 0x03
    3c44:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    3c46:	29 81       	ldd	r18, Y+1	; 0x01
    3c48:	3a 81       	ldd	r19, Y+2	; 0x02
    3c4a:	89 85       	ldd	r24, Y+9	; 0x09
    3c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4e:	fc 01       	movw	r30, r24
    3c50:	e2 0f       	add	r30, r18
    3c52:	f3 1f       	adc	r31, r19
    3c54:	80 81       	ld	r24, Z
    3c56:	88 23       	and	r24, r24
    3c58:	89 f6       	brne	.-94     	; 0x3bfc <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    3c5a:	a6 96       	adiw	r28, 0x26	; 38
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <LCD_voidGoToPosition+0x6>
    3c72:	0f 92       	push	r0
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	8a 83       	std	Y+2, r24	; 0x02
    3c7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    3c7c:	80 e8       	ldi	r24, 0x80	; 128
    3c7e:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	88 23       	and	r24, r24
    3c84:	21 f4       	brne	.+8      	; 0x3c8e <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	80 58       	subi	r24, 0x80	; 128
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	14 c0       	rjmp	.+40     	; 0x3cb6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	21 f4       	brne	.+8      	; 0x3c9c <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	80 54       	subi	r24, 0x40	; 64
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	0d c0       	rjmp	.+26     	; 0x3cb6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	82 30       	cpi	r24, 0x02	; 2
    3ca0:	21 f4       	brne	.+8      	; 0x3caa <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	8c 56       	subi	r24, 0x6C	; 108
    3ca6:	89 83       	std	Y+1, r24	; 0x01
    3ca8:	06 c0       	rjmp	.+12     	; 0x3cb6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	83 30       	cpi	r24, 0x03	; 3
    3cae:	19 f4       	brne	.+6      	; 0x3cb6 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	8c 52       	subi	r24, 0x2C	; 44
    3cb4:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	80 68       	ori	r24, 0x80	; 128
    3cba:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
}
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <LCD_voidClear+0x6>
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	89 83       	std	Y+1, r24	; 0x01
    3cda:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	6a 81       	ldd	r22, Y+2	; 0x02
    3ce0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    3ce4:	80 e2       	ldi	r24, 0x20	; 32
    3ce6:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <LCD_voidClearLine+0x6>
    3cfa:	0f 92       	push	r0
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	8a 83       	std	Y+2, r24	; 0x02
    3d02:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    3d04:	19 82       	std	Y+1, r1	; 0x01
    3d06:	0a c0       	rjmp	.+20     	; 0x3d1c <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	69 81       	ldd	r22, Y+1	; 0x01
    3d0c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    3d10:	80 e2       	ldi	r24, 0x20	; 32
    3d12:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	8f 5f       	subi	r24, 0xFF	; 255
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	99 81       	ldd	r25, Y+1	; 0x01
    3d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d20:	89 17       	cp	r24, r25
    3d22:	90 f7       	brcc	.-28     	; 0x3d08 <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	08 95       	ret

00003d30 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	27 97       	sbiw	r28, 0x07	; 7
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	9c 83       	std	Y+4, r25	; 0x04
    3d46:	8b 83       	std	Y+3, r24	; 0x03
    3d48:	6d 83       	std	Y+5, r22	; 0x05
    3d4a:	4e 83       	std	Y+6, r20	; 0x06
    3d4c:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    3d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d50:	6f 81       	ldd	r22, Y+7	; 0x07
    3d52:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
	u8 address = 0;
    3d5c:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    3d5e:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    3d60:	8d 81       	ldd	r24, Y+5	; 0x05
    3d62:	88 30       	cpi	r24, 0x08	; 8
    3d64:	30 f5       	brcc	.+76     	; 0x3db2 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    3d66:	8d 81       	ldd	r24, Y+5	; 0x05
    3d68:	88 2f       	mov	r24, r24
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	88 0f       	add	r24, r24
    3d72:	99 1f       	adc	r25, r25
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    3d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7c:	80 64       	ori	r24, 0x40	; 64
    3d7e:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	8f 77       	andi	r24, 0x7F	; 127
    3d84:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    3d8c:	19 82       	std	Y+1, r1	; 0x01
    3d8e:	0e c0       	rjmp	.+28     	; 0x3dac <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	28 2f       	mov	r18, r24
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	8b 81       	ldd	r24, Y+3	; 0x03
    3d98:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	e2 0f       	add	r30, r18
    3d9e:	f3 1f       	adc	r31, r19
    3da0:	80 81       	ld	r24, Z
    3da2:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	8f 5f       	subi	r24, 0xFF	; 255
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	88 30       	cpi	r24, 0x08	; 8
    3db0:	78 f3       	brcs	.-34     	; 0x3d90 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <LCD_voidSendCommand>
}
    3db8:	27 96       	adiw	r28, 0x07	; 7
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <KPD_u8GetPressedKey>:
#include "KPD_Private.h"



u8 KPD_u8GetPressedKey(void)
{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <KPD_u8GetPressedKey+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <KPD_u8GetPressedKey+0x8>
    3dd2:	0f 92       	push	r0
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    3dd8:	8f ef       	ldi	r24, 0xFF	; 255
    3dda:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState = 0;
    3ddc:	1c 82       	std	Y+4, r1	; 0x04
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    3dde:	1a 82       	std	Y+2, r1	; 0x02
    3de0:	5e c0       	rjmp	.+188    	; 0x3e9e <KPD_u8GetPressedKey+0xd4>
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	88 2f       	mov	r24, r24
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	fc 01       	movw	r30, r24
    3dea:	e4 57       	subi	r30, 0x74	; 116
    3dec:	fe 4f       	sbci	r31, 0xFE	; 254
    3dee:	90 81       	ld	r25, Z
    3df0:	82 e0       	ldi	r24, 0x02	; 2
    3df2:	69 2f       	mov	r22, r25
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    3dfa:	19 82       	std	Y+1, r1	; 0x01
    3dfc:	3d c0       	rjmp	.+122    	; 0x3e78 <KPD_u8GetPressedKey+0xae>
		{
			// Get Current Row
			DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	fc 01       	movw	r30, r24
    3e06:	e8 57       	subi	r30, 0x78	; 120
    3e08:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0a:	90 81       	ld	r25, Z
    3e0c:	9e 01       	movw	r18, r28
    3e0e:	2c 5f       	subi	r18, 0xFC	; 252
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	82 e0       	ldi	r24, 0x02	; 2
    3e14:	69 2f       	mov	r22, r25
    3e16:	a9 01       	movw	r20, r18
    3e18:	0e 94 0f 11 	call	0x221e	; 0x221e <DIO_GetPinValue>

			// Check pressed
			if( DIO_u8PIN_LOW == Local_u8PinState )
    3e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e1e:	88 23       	and	r24, r24
    3e20:	41 f5       	brne	.+80     	; 0x3e72 <KPD_u8GetPressedKey+0xa8>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	48 2f       	mov	r20, r24
    3e26:	50 e0       	ldi	r21, 0x00	; 0
    3e28:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	ca 01       	movw	r24, r20
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	88 0f       	add	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	82 0f       	add	r24, r18
    3e3a:	93 1f       	adc	r25, r19
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	e0 57       	subi	r30, 0x70	; 112
    3e40:	fe 4f       	sbci	r31, 0xFE	; 254
    3e42:	80 81       	ld	r24, Z
    3e44:	8b 83       	std	Y+3, r24	; 0x03
    3e46:	0f c0       	rjmp	.+30     	; 0x3e66 <KPD_u8GetPressedKey+0x9c>

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	88 2f       	mov	r24, r24
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e8 57       	subi	r30, 0x78	; 120
    3e52:	fe 4f       	sbci	r31, 0xFE	; 254
    3e54:	90 81       	ld	r25, Z
    3e56:	9e 01       	movw	r18, r28
    3e58:	2c 5f       	subi	r18, 0xFC	; 252
    3e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5c:	82 e0       	ldi	r24, 0x02	; 2
    3e5e:	69 2f       	mov	r22, r25
    3e60:	a9 01       	movw	r20, r18
    3e62:	0e 94 0f 11 	call	0x221e	; 0x221e <DIO_GetPinValue>
			if( DIO_u8PIN_LOW == Local_u8PinState )
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
    3e66:	8c 81       	ldd	r24, Y+4	; 0x04
    3e68:	88 23       	and	r24, r24
    3e6a:	71 f3       	breq	.-36     	; 0x3e48 <KPD_u8GetPressedKey+0x7e>
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	1c c0       	rjmp	.+56     	; 0x3eaa <KPD_u8GetPressedKey+0xe0>
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	8f 5f       	subi	r24, 0xFF	; 255
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	84 30       	cpi	r24, 0x04	; 4
    3e7c:	08 f4       	brcc	.+2      	; 0x3e80 <KPD_u8GetPressedKey+0xb6>
    3e7e:	bf cf       	rjmp	.-130    	; 0x3dfe <KPD_u8GetPressedKey+0x34>
				return Local_u8PressedKey;
			}

		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	88 2f       	mov	r24, r24
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	fc 01       	movw	r30, r24
    3e88:	e4 57       	subi	r30, 0x74	; 116
    3e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8c:	90 81       	ld	r25, Z
    3e8e:	82 e0       	ldi	r24, 0x02	; 2
    3e90:	69 2f       	mov	r22, r25
    3e92:	41 e0       	ldi	r20, 0x01	; 1
    3e94:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <DIO_u8SetPinValue>
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    3e98:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9a:	8f 5f       	subi	r24, 0xFF	; 255
    3e9c:	8a 83       	std	Y+2, r24	; 0x02
    3e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea0:	84 30       	cpi	r24, 0x04	; 4
    3ea2:	08 f4       	brcc	.+2      	; 0x3ea6 <KPD_u8GetPressedKey+0xdc>
    3ea4:	9e cf       	rjmp	.-196    	; 0x3de2 <KPD_u8GetPressedKey+0x18>
		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    3ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	0f 90       	pop	r0
    3eb2:	0f 90       	pop	r0
    3eb4:	0f 90       	pop	r0
    3eb6:	cf 91       	pop	r28
    3eb8:	df 91       	pop	r29
    3eba:	08 95       	ret

00003ebc <Convert>:

u8* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};


u8 Convert( u8 Num )
{
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <Convert+0x6>
    3ec2:	00 d0       	rcall	.+0      	; 0x3ec4 <Convert+0x8>
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	8c 83       	std	Y+4, r24	; 0x04
	u8 ones =Num % 10;
    3eca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ecc:	9a e0       	ldi	r25, 0x0A	; 10
    3ece:	69 2f       	mov	r22, r25
    3ed0:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <__udivmodqi4>
    3ed4:	89 2f       	mov	r24, r25
    3ed6:	8b 83       	std	Y+3, r24	; 0x03
	u8 tens = (Num / 10) << 4;
    3ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eda:	9a e0       	ldi	r25, 0x0A	; 10
    3edc:	69 2f       	mov	r22, r25
    3ede:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <__udivmodqi4>
    3ee2:	82 95       	swap	r24
    3ee4:	80 7f       	andi	r24, 0xF0	; 240
    3ee6:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = tens | ones;
    3ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eea:	8b 81       	ldd	r24, Y+3	; 0x03
    3eec:	89 2b       	or	r24, r25
    3eee:	89 83       	std	Y+1, r24	; 0x01

	return value;
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	cf 91       	pop	r28
    3efc:	df 91       	pop	r29
    3efe:	08 95       	ret

00003f00 <main>:

int main(void)
{
    3f00:	0f 93       	push	r16
    3f02:	1f 93       	push	r17
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    3f0c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <PORT_voidInit>
	LCD_voidInit();
    3f10:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_voidInit>
	I2C_Master_voidInit();
    3f14:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <I2C_Master_voidInit>

	RTC_Write_Calendar(Convert(INITIAL_DATE),INITIAL_DAY,Convert(INITIAL_MON),Convert(INITIAL_YEAR));
    3f18:	83 e0       	ldi	r24, 0x03	; 3
    3f1a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f1e:	18 2f       	mov	r17, r24
    3f20:	8b e0       	ldi	r24, 0x0B	; 11
    3f22:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f26:	08 2f       	mov	r16, r24
    3f28:	87 e1       	ldi	r24, 0x17	; 23
    3f2a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f2e:	98 2f       	mov	r25, r24
    3f30:	81 2f       	mov	r24, r17
    3f32:	65 e0       	ldi	r22, 0x05	; 5
    3f34:	40 2f       	mov	r20, r16
    3f36:	29 2f       	mov	r18, r25
    3f38:	0e 94 67 13 	call	0x26ce	; 0x26ce <RTC_Write_Calendar>
	RTC_Write_Clock(Convert(INITIAL_SEC),Convert(INITIAL_MIN),Convert(INITIAL_HOUR));
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f42:	08 2f       	mov	r16, r24
    3f44:	8c e0       	ldi	r24, 0x0C	; 12
    3f46:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f4a:	18 2f       	mov	r17, r24
    3f4c:	8f e0       	ldi	r24, 0x0F	; 15
    3f4e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <Convert>
    3f52:	98 2f       	mov	r25, r24
    3f54:	80 2f       	mov	r24, r16
    3f56:	61 2f       	mov	r22, r17
    3f58:	49 2f       	mov	r20, r25
    3f5a:	0e 94 8e 13 	call	0x271c	; 0x271c <RTC_Write_Clock>


	while(1)
	{
		RTC_Read_Time();
    3f5e:	0e 94 b0 13 	call	0x2760	; 0x2760 <RTC_Read_Time>

		Sec = (Sec >> 4) * 10 + (Sec & 0x0F);
    3f62:	80 91 c4 01 	lds	r24, 0x01C4
    3f66:	82 95       	swap	r24
    3f68:	8f 70       	andi	r24, 0x0F	; 15
    3f6a:	88 2f       	mov	r24, r24
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	9c 01       	movw	r18, r24
    3f70:	22 0f       	add	r18, r18
    3f72:	33 1f       	adc	r19, r19
    3f74:	c9 01       	movw	r24, r18
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	82 0f       	add	r24, r18
    3f80:	93 1f       	adc	r25, r19
    3f82:	98 2f       	mov	r25, r24
    3f84:	80 91 c4 01 	lds	r24, 0x01C4
    3f88:	8f 70       	andi	r24, 0x0F	; 15
    3f8a:	89 0f       	add	r24, r25
    3f8c:	80 93 c4 01 	sts	0x01C4, r24
		Min = (Min >> 4) * 10 + (Min & 0x0F);
    3f90:	80 91 c5 01 	lds	r24, 0x01C5
    3f94:	82 95       	swap	r24
    3f96:	8f 70       	andi	r24, 0x0F	; 15
    3f98:	88 2f       	mov	r24, r24
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	9c 01       	movw	r18, r24
    3f9e:	22 0f       	add	r18, r18
    3fa0:	33 1f       	adc	r19, r19
    3fa2:	c9 01       	movw	r24, r18
    3fa4:	88 0f       	add	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	82 0f       	add	r24, r18
    3fae:	93 1f       	adc	r25, r19
    3fb0:	98 2f       	mov	r25, r24
    3fb2:	80 91 c5 01 	lds	r24, 0x01C5
    3fb6:	8f 70       	andi	r24, 0x0F	; 15
    3fb8:	89 0f       	add	r24, r25
    3fba:	80 93 c5 01 	sts	0x01C5, r24
		Hour = (Hour >> 4) * 10 + (Hour & 0x0F);
    3fbe:	80 91 c6 01 	lds	r24, 0x01C6
    3fc2:	82 95       	swap	r24
    3fc4:	8f 70       	andi	r24, 0x0F	; 15
    3fc6:	88 2f       	mov	r24, r24
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	9c 01       	movw	r18, r24
    3fcc:	22 0f       	add	r18, r18
    3fce:	33 1f       	adc	r19, r19
    3fd0:	c9 01       	movw	r24, r18
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	88 0f       	add	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	82 0f       	add	r24, r18
    3fdc:	93 1f       	adc	r25, r19
    3fde:	98 2f       	mov	r25, r24
    3fe0:	80 91 c6 01 	lds	r24, 0x01C6
    3fe4:	8f 70       	andi	r24, 0x0F	; 15
    3fe6:	89 0f       	add	r24, r25
    3fe8:	80 93 c6 01 	sts	0x01C6, r24

		LCD_voidGoToPosition(0,0);
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_voidGoToPosition>
		if(Hour < 10)
    3ff4:	80 91 c6 01 	lds	r24, 0x01C6
    3ff8:	8a 30       	cpi	r24, 0x0A	; 10
    3ffa:	18 f4       	brcc	.+6      	; 0x4002 <main+0x102>
		{
			LCD_voidWriteChar('0');
    3ffc:	80 e3       	ldi	r24, 0x30	; 48
    3ffe:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(Hour);
    4002:	80 91 c6 01 	lds	r24, 0x01C6
    4006:	88 2f       	mov	r24, r24
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 e0       	ldi	r26, 0x00	; 0
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	bc 01       	movw	r22, r24
    4010:	cd 01       	movw	r24, r26
    4012:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>
		LCD_voidWriteChar(':');
    4016:	8a e3       	ldi	r24, 0x3A	; 58
    4018:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		if(Min < 10)
    401c:	80 91 c5 01 	lds	r24, 0x01C5
    4020:	8a 30       	cpi	r24, 0x0A	; 10
    4022:	18 f4       	brcc	.+6      	; 0x402a <main+0x12a>
		{
			LCD_voidWriteChar('0');
    4024:	80 e3       	ldi	r24, 0x30	; 48
    4026:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(Min);
    402a:	80 91 c5 01 	lds	r24, 0x01C5
    402e:	88 2f       	mov	r24, r24
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 e0       	ldi	r26, 0x00	; 0
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>
		LCD_voidWriteChar(':');
    403e:	8a e3       	ldi	r24, 0x3A	; 58
    4040:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		if(Sec < 10)
    4044:	80 91 c4 01 	lds	r24, 0x01C4
    4048:	8a 30       	cpi	r24, 0x0A	; 10
    404a:	18 f4       	brcc	.+6      	; 0x4052 <main+0x152>
		{
			LCD_voidWriteChar('0');
    404c:	80 e3       	ldi	r24, 0x30	; 48
    404e:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(Sec);
    4052:	80 91 c4 01 	lds	r24, 0x01C4
    4056:	88 2f       	mov	r24, r24
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	a0 e0       	ldi	r26, 0x00	; 0
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>

		RTC_Read_Calendar();
    4066:	0e 94 3f 13 	call	0x267e	; 0x267e <RTC_Read_Calendar>

		Date = (Date >> 4) * 10 + (Date & 0x0F);
    406a:	80 91 c8 01 	lds	r24, 0x01C8
    406e:	82 95       	swap	r24
    4070:	8f 70       	andi	r24, 0x0F	; 15
    4072:	88 2f       	mov	r24, r24
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	9c 01       	movw	r18, r24
    4078:	22 0f       	add	r18, r18
    407a:	33 1f       	adc	r19, r19
    407c:	c9 01       	movw	r24, r18
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	82 0f       	add	r24, r18
    4088:	93 1f       	adc	r25, r19
    408a:	98 2f       	mov	r25, r24
    408c:	80 91 c8 01 	lds	r24, 0x01C8
    4090:	8f 70       	andi	r24, 0x0F	; 15
    4092:	89 0f       	add	r24, r25
    4094:	80 93 c8 01 	sts	0x01C8, r24
		Mon = (Mon >> 4) * 10 + (Mon & 0x0F);
    4098:	80 91 c9 01 	lds	r24, 0x01C9
    409c:	82 95       	swap	r24
    409e:	8f 70       	andi	r24, 0x0F	; 15
    40a0:	88 2f       	mov	r24, r24
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	9c 01       	movw	r18, r24
    40a6:	22 0f       	add	r18, r18
    40a8:	33 1f       	adc	r19, r19
    40aa:	c9 01       	movw	r24, r18
    40ac:	88 0f       	add	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	88 0f       	add	r24, r24
    40b2:	99 1f       	adc	r25, r25
    40b4:	82 0f       	add	r24, r18
    40b6:	93 1f       	adc	r25, r19
    40b8:	98 2f       	mov	r25, r24
    40ba:	80 91 c9 01 	lds	r24, 0x01C9
    40be:	8f 70       	andi	r24, 0x0F	; 15
    40c0:	89 0f       	add	r24, r25
    40c2:	80 93 c9 01 	sts	0x01C9, r24
		Year = (Year >> 4) * 10 + (Year & 0x0F);
    40c6:	80 91 ca 01 	lds	r24, 0x01CA
    40ca:	82 95       	swap	r24
    40cc:	8f 70       	andi	r24, 0x0F	; 15
    40ce:	88 2f       	mov	r24, r24
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	9c 01       	movw	r18, r24
    40d4:	22 0f       	add	r18, r18
    40d6:	33 1f       	adc	r19, r19
    40d8:	c9 01       	movw	r24, r18
    40da:	88 0f       	add	r24, r24
    40dc:	99 1f       	adc	r25, r25
    40de:	88 0f       	add	r24, r24
    40e0:	99 1f       	adc	r25, r25
    40e2:	82 0f       	add	r24, r18
    40e4:	93 1f       	adc	r25, r19
    40e6:	98 2f       	mov	r25, r24
    40e8:	80 91 ca 01 	lds	r24, 0x01CA
    40ec:	8f 70       	andi	r24, 0x0F	; 15
    40ee:	89 0f       	add	r24, r25
    40f0:	80 93 ca 01 	sts	0x01CA, r24

		LCD_voidGoToPosition(1,0);
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	60 e0       	ldi	r22, 0x00	; 0
    40f8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <LCD_voidGoToPosition>
		LCD_voidWriteIntData(Date);
    40fc:	80 91 c8 01 	lds	r24, 0x01C8
    4100:	88 2f       	mov	r24, r24
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	a0 e0       	ldi	r26, 0x00	; 0
    4106:	b0 e0       	ldi	r27, 0x00	; 0
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>
		LCD_voidWriteChar('/');
    4110:	8f e2       	ldi	r24, 0x2F	; 47
    4112:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		LCD_voidWriteIntData(Mon);
    4116:	80 91 c9 01 	lds	r24, 0x01C9
    411a:	88 2f       	mov	r24, r24
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a0 e0       	ldi	r26, 0x00	; 0
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>
		LCD_voidWriteChar('/');
    412a:	8f e2       	ldi	r24, 0x2F	; 47
    412c:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		LCD_voidWriteIntData(Year);
    4130:	80 91 ca 01 	lds	r24, 0x01CA
    4134:	88 2f       	mov	r24, r24
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	a0 e0       	ldi	r26, 0x00	; 0
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <LCD_voidWriteIntData>
		LCD_voidWriteChar(' ');
    4144:	80 e2       	ldi	r24, 0x20	; 32
    4146:	0e 94 84 1b 	call	0x3708	; 0x3708 <LCD_voidWriteChar>
		LCD_voidWriteString(days[Day]);
    414a:	80 91 c7 01 	lds	r24, 0x01C7
    414e:	88 2f       	mov	r24, r24
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	fc 01       	movw	r30, r24
    4158:	e0 56       	subi	r30, 0x60	; 96
    415a:	fe 4f       	sbci	r31, 0xFE	; 254
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <LCD_voidWriteString>
    4164:	fc ce       	rjmp	.-520    	; 0x3f5e <main+0x5e>

00004166 <__mulsi3>:
    4166:	62 9f       	mul	r22, r18
    4168:	d0 01       	movw	r26, r0
    416a:	73 9f       	mul	r23, r19
    416c:	f0 01       	movw	r30, r0
    416e:	82 9f       	mul	r24, r18
    4170:	e0 0d       	add	r30, r0
    4172:	f1 1d       	adc	r31, r1
    4174:	64 9f       	mul	r22, r20
    4176:	e0 0d       	add	r30, r0
    4178:	f1 1d       	adc	r31, r1
    417a:	92 9f       	mul	r25, r18
    417c:	f0 0d       	add	r31, r0
    417e:	83 9f       	mul	r24, r19
    4180:	f0 0d       	add	r31, r0
    4182:	74 9f       	mul	r23, r20
    4184:	f0 0d       	add	r31, r0
    4186:	65 9f       	mul	r22, r21
    4188:	f0 0d       	add	r31, r0
    418a:	99 27       	eor	r25, r25
    418c:	72 9f       	mul	r23, r18
    418e:	b0 0d       	add	r27, r0
    4190:	e1 1d       	adc	r30, r1
    4192:	f9 1f       	adc	r31, r25
    4194:	63 9f       	mul	r22, r19
    4196:	b0 0d       	add	r27, r0
    4198:	e1 1d       	adc	r30, r1
    419a:	f9 1f       	adc	r31, r25
    419c:	bd 01       	movw	r22, r26
    419e:	cf 01       	movw	r24, r30
    41a0:	11 24       	eor	r1, r1
    41a2:	08 95       	ret

000041a4 <__udivmodqi4>:
    41a4:	99 1b       	sub	r25, r25
    41a6:	79 e0       	ldi	r23, 0x09	; 9
    41a8:	04 c0       	rjmp	.+8      	; 0x41b2 <__udivmodqi4_ep>

000041aa <__udivmodqi4_loop>:
    41aa:	99 1f       	adc	r25, r25
    41ac:	96 17       	cp	r25, r22
    41ae:	08 f0       	brcs	.+2      	; 0x41b2 <__udivmodqi4_ep>
    41b0:	96 1b       	sub	r25, r22

000041b2 <__udivmodqi4_ep>:
    41b2:	88 1f       	adc	r24, r24
    41b4:	7a 95       	dec	r23
    41b6:	c9 f7       	brne	.-14     	; 0x41aa <__udivmodqi4_loop>
    41b8:	80 95       	com	r24
    41ba:	08 95       	ret

000041bc <__divmodsi4>:
    41bc:	97 fb       	bst	r25, 7
    41be:	09 2e       	mov	r0, r25
    41c0:	05 26       	eor	r0, r21
    41c2:	0e d0       	rcall	.+28     	; 0x41e0 <__divmodsi4_neg1>
    41c4:	57 fd       	sbrc	r21, 7
    41c6:	04 d0       	rcall	.+8      	; 0x41d0 <__divmodsi4_neg2>
    41c8:	14 d0       	rcall	.+40     	; 0x41f2 <__udivmodsi4>
    41ca:	0a d0       	rcall	.+20     	; 0x41e0 <__divmodsi4_neg1>
    41cc:	00 1c       	adc	r0, r0
    41ce:	38 f4       	brcc	.+14     	; 0x41de <__divmodsi4_exit>

000041d0 <__divmodsi4_neg2>:
    41d0:	50 95       	com	r21
    41d2:	40 95       	com	r20
    41d4:	30 95       	com	r19
    41d6:	21 95       	neg	r18
    41d8:	3f 4f       	sbci	r19, 0xFF	; 255
    41da:	4f 4f       	sbci	r20, 0xFF	; 255
    41dc:	5f 4f       	sbci	r21, 0xFF	; 255

000041de <__divmodsi4_exit>:
    41de:	08 95       	ret

000041e0 <__divmodsi4_neg1>:
    41e0:	f6 f7       	brtc	.-4      	; 0x41de <__divmodsi4_exit>
    41e2:	90 95       	com	r25
    41e4:	80 95       	com	r24
    41e6:	70 95       	com	r23
    41e8:	61 95       	neg	r22
    41ea:	7f 4f       	sbci	r23, 0xFF	; 255
    41ec:	8f 4f       	sbci	r24, 0xFF	; 255
    41ee:	9f 4f       	sbci	r25, 0xFF	; 255
    41f0:	08 95       	ret

000041f2 <__udivmodsi4>:
    41f2:	a1 e2       	ldi	r26, 0x21	; 33
    41f4:	1a 2e       	mov	r1, r26
    41f6:	aa 1b       	sub	r26, r26
    41f8:	bb 1b       	sub	r27, r27
    41fa:	fd 01       	movw	r30, r26
    41fc:	0d c0       	rjmp	.+26     	; 0x4218 <__udivmodsi4_ep>

000041fe <__udivmodsi4_loop>:
    41fe:	aa 1f       	adc	r26, r26
    4200:	bb 1f       	adc	r27, r27
    4202:	ee 1f       	adc	r30, r30
    4204:	ff 1f       	adc	r31, r31
    4206:	a2 17       	cp	r26, r18
    4208:	b3 07       	cpc	r27, r19
    420a:	e4 07       	cpc	r30, r20
    420c:	f5 07       	cpc	r31, r21
    420e:	20 f0       	brcs	.+8      	; 0x4218 <__udivmodsi4_ep>
    4210:	a2 1b       	sub	r26, r18
    4212:	b3 0b       	sbc	r27, r19
    4214:	e4 0b       	sbc	r30, r20
    4216:	f5 0b       	sbc	r31, r21

00004218 <__udivmodsi4_ep>:
    4218:	66 1f       	adc	r22, r22
    421a:	77 1f       	adc	r23, r23
    421c:	88 1f       	adc	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	1a 94       	dec	r1
    4222:	69 f7       	brne	.-38     	; 0x41fe <__udivmodsi4_loop>
    4224:	60 95       	com	r22
    4226:	70 95       	com	r23
    4228:	80 95       	com	r24
    422a:	90 95       	com	r25
    422c:	9b 01       	movw	r18, r22
    422e:	ac 01       	movw	r20, r24
    4230:	bd 01       	movw	r22, r26
    4232:	cf 01       	movw	r24, r30
    4234:	08 95       	ret

00004236 <__prologue_saves__>:
    4236:	2f 92       	push	r2
    4238:	3f 92       	push	r3
    423a:	4f 92       	push	r4
    423c:	5f 92       	push	r5
    423e:	6f 92       	push	r6
    4240:	7f 92       	push	r7
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	ca 1b       	sub	r28, r26
    4260:	db 0b       	sbc	r29, r27
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	09 94       	ijmp

0000426e <__epilogue_restores__>:
    426e:	2a 88       	ldd	r2, Y+18	; 0x12
    4270:	39 88       	ldd	r3, Y+17	; 0x11
    4272:	48 88       	ldd	r4, Y+16	; 0x10
    4274:	5f 84       	ldd	r5, Y+15	; 0x0f
    4276:	6e 84       	ldd	r6, Y+14	; 0x0e
    4278:	7d 84       	ldd	r7, Y+13	; 0x0d
    427a:	8c 84       	ldd	r8, Y+12	; 0x0c
    427c:	9b 84       	ldd	r9, Y+11	; 0x0b
    427e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4280:	b9 84       	ldd	r11, Y+9	; 0x09
    4282:	c8 84       	ldd	r12, Y+8	; 0x08
    4284:	df 80       	ldd	r13, Y+7	; 0x07
    4286:	ee 80       	ldd	r14, Y+6	; 0x06
    4288:	fd 80       	ldd	r15, Y+5	; 0x05
    428a:	0c 81       	ldd	r16, Y+4	; 0x04
    428c:	1b 81       	ldd	r17, Y+3	; 0x03
    428e:	aa 81       	ldd	r26, Y+2	; 0x02
    4290:	b9 81       	ldd	r27, Y+1	; 0x01
    4292:	ce 0f       	add	r28, r30
    4294:	d1 1d       	adc	r29, r1
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	ed 01       	movw	r28, r26
    42a2:	08 95       	ret

000042a4 <_exit>:
    42a4:	f8 94       	cli

000042a6 <__stop_program>:
    42a6:	ff cf       	rjmp	.-2      	; 0x42a6 <__stop_program>
